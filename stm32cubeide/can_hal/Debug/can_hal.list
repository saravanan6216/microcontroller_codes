
can_hal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025f4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800277c  0800277c  0001277c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002828  08002828  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002828  08002828  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002828  08002828  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002828  08002828  00012828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800282c  0800282c  0001282c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002830  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000070  080028a0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  080028a0  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006f96  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016c0  00000000  00000000  00027036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c0  00000000  00000000  000286f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006f8  00000000  00000000  00028eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000260ab  00000000  00000000  000295b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000079c9  00000000  00000000  0004f65b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5d95  00000000  00000000  00057024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013cdb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002458  00000000  00000000  0013ce0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002764 	.word	0x08002764

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08002764 	.word	0x08002764

080001c8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001d4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80001d8:	f003 0301 	and.w	r3, r3, #1
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d013      	beq.n	8000208 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80001e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001e4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80001e8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d00b      	beq.n	8000208 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80001f0:	e000      	b.n	80001f4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80001f2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80001f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d0f9      	beq.n	80001f2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80001fe:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000202:	687a      	ldr	r2, [r7, #4]
 8000204:	b2d2      	uxtb	r2, r2
 8000206:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000208:	687b      	ldr	r3, [r7, #4]
}
 800020a:	4618      	mov	r0, r3
 800020c:	370c      	adds	r7, #12
 800020e:	46bd      	mov	sp, r7
 8000210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000214:	4770      	bx	lr

08000216 <_write>:
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stdio.h"
int _write(int file,char *ptr,int len)
{
 8000216:	b580      	push	{r7, lr}
 8000218:	b086      	sub	sp, #24
 800021a:	af00      	add	r7, sp, #0
 800021c:	60f8      	str	r0, [r7, #12]
 800021e:	60b9      	str	r1, [r7, #8]
 8000220:	607a      	str	r2, [r7, #4]
    int i=0;
 8000222:	2300      	movs	r3, #0
 8000224:	617b      	str	r3, [r7, #20]
    for(i=0;i<len;i++)
 8000226:	2300      	movs	r3, #0
 8000228:	617b      	str	r3, [r7, #20]
 800022a:	e009      	b.n	8000240 <_write+0x2a>
    	ITM_SendChar((*ptr++));
 800022c:	68bb      	ldr	r3, [r7, #8]
 800022e:	1c5a      	adds	r2, r3, #1
 8000230:	60ba      	str	r2, [r7, #8]
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	4618      	mov	r0, r3
 8000236:	f7ff ffc7 	bl	80001c8 <ITM_SendChar>
    for(i=0;i<len;i++)
 800023a:	697b      	ldr	r3, [r7, #20]
 800023c:	3301      	adds	r3, #1
 800023e:	617b      	str	r3, [r7, #20]
 8000240:	697a      	ldr	r2, [r7, #20]
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	429a      	cmp	r2, r3
 8000246:	dbf1      	blt.n	800022c <_write+0x16>
    return len;
 8000248:	687b      	ldr	r3, [r7, #4]
}
 800024a:	4618      	mov	r0, r3
 800024c:	3718      	adds	r7, #24
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
	...

08000254 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b08a      	sub	sp, #40	; 0x28
 8000258:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800025a:	f000 fa2b 	bl	80006b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800025e:	f000 f83b 	bl	80002d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000262:	f000 f8b3 	bl	80003cc <MX_GPIO_Init>
  MX_CAN1_Init();
 8000266:	f000 f87d 	bl	8000364 <MX_CAN1_Init>
    /* USER CODE END WHILE */
	  CAN_TxHeaderTypeDef txHeader;
	     uint8_t txData[8];

	     // Prepare CAN message
	     txHeader.StdId = 0x321; // Standard ID
 800026a:	f240 3321 	movw	r3, #801	; 0x321
 800026e:	60fb      	str	r3, [r7, #12]
	     txHeader.ExtId = 0;     // Extended ID (not used here)
 8000270:	2300      	movs	r3, #0
 8000272:	613b      	str	r3, [r7, #16]
	     txHeader.IDE = CAN_ID_STD;
 8000274:	2300      	movs	r3, #0
 8000276:	617b      	str	r3, [r7, #20]
	     txHeader.RTR = CAN_RTR_DATA;
 8000278:	2300      	movs	r3, #0
 800027a:	61bb      	str	r3, [r7, #24]
	     txHeader.DLC = 8;
 800027c:	2308      	movs	r3, #8
 800027e:	61fb      	str	r3, [r7, #28]

	     for (int i = 0; i < 8; i++) {
 8000280:	2300      	movs	r3, #0
 8000282:	627b      	str	r3, [r7, #36]	; 0x24
 8000284:	e009      	b.n	800029a <main+0x46>
	       txData[i] = i; // Data to be transmitted
 8000286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000288:	b2d9      	uxtb	r1, r3
 800028a:	1d3a      	adds	r2, r7, #4
 800028c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800028e:	4413      	add	r3, r2
 8000290:	460a      	mov	r2, r1
 8000292:	701a      	strb	r2, [r3, #0]
	     for (int i = 0; i < 8; i++) {
 8000294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000296:	3301      	adds	r3, #1
 8000298:	627b      	str	r3, [r7, #36]	; 0x24
 800029a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800029c:	2b07      	cmp	r3, #7
 800029e:	ddf2      	ble.n	8000286 <main+0x32>
	     }

	     // Transmit CAN message
	     if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, NULL) != HAL_OK) {
 80002a0:	1d3a      	adds	r2, r7, #4
 80002a2:	f107 010c 	add.w	r1, r7, #12
 80002a6:	2300      	movs	r3, #0
 80002a8:	4809      	ldr	r0, [pc, #36]	; (80002d0 <main+0x7c>)
 80002aa:	f000 fb9e 	bl	80009ea <HAL_CAN_AddTxMessage>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d007      	beq.n	80002c4 <main+0x70>
	    	 printf("error\n");
 80002b4:	4807      	ldr	r0, [pc, #28]	; (80002d4 <main+0x80>)
 80002b6:	f001 fdc5 	bl	8001e44 <puts>
	       Error_Handler();
 80002ba:	f000 f89f 	bl	80003fc <Error_Handler>
	       printf("error\n");
 80002be:	4805      	ldr	r0, [pc, #20]	; (80002d4 <main+0x80>)
 80002c0:	f001 fdc0 	bl	8001e44 <puts>
	     }

	     HAL_Delay(1000); // Delay between transmissions
 80002c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002c8:	f000 fa70 	bl	80007ac <HAL_Delay>
  {
 80002cc:	e7cd      	b.n	800026a <main+0x16>
 80002ce:	bf00      	nop
 80002d0:	2000008c 	.word	0x2000008c
 80002d4:	0800277c 	.word	0x0800277c

080002d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b096      	sub	sp, #88	; 0x58
 80002dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002de:	f107 0314 	add.w	r3, r7, #20
 80002e2:	2244      	movs	r2, #68	; 0x44
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f001 fd36 	bl	8001d58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ec:	463b      	mov	r3, r7
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
 80002f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002fe:	f000 fee3 	bl	80010c8 <HAL_PWREx_ControlVoltageScaling>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000308:	f000 f878 	bl	80003fc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800030c:	2302      	movs	r3, #2
 800030e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000310:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000314:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000316:	2310      	movs	r3, #16
 8000318:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800031a:	2300      	movs	r3, #0
 800031c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031e:	f107 0314 	add.w	r3, r7, #20
 8000322:	4618      	mov	r0, r3
 8000324:	f000 ff26 	bl	8001174 <HAL_RCC_OscConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800032e:	f000 f865 	bl	80003fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000332:	230f      	movs	r3, #15
 8000334:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000336:	2301      	movs	r3, #1
 8000338:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800033e:	2300      	movs	r3, #0
 8000340:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000342:	2300      	movs	r3, #0
 8000344:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000346:	463b      	mov	r3, r7
 8000348:	2100      	movs	r1, #0
 800034a:	4618      	mov	r0, r3
 800034c:	f001 faee 	bl	800192c <HAL_RCC_ClockConfig>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000356:	f000 f851 	bl	80003fc <Error_Handler>
  }
}
 800035a:	bf00      	nop
 800035c:	3758      	adds	r7, #88	; 0x58
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
	...

08000364 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000368:	4b16      	ldr	r3, [pc, #88]	; (80003c4 <MX_CAN1_Init+0x60>)
 800036a:	4a17      	ldr	r2, [pc, #92]	; (80003c8 <MX_CAN1_Init+0x64>)
 800036c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800036e:	4b15      	ldr	r3, [pc, #84]	; (80003c4 <MX_CAN1_Init+0x60>)
 8000370:	2210      	movs	r2, #16
 8000372:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000374:	4b13      	ldr	r3, [pc, #76]	; (80003c4 <MX_CAN1_Init+0x60>)
 8000376:	2200      	movs	r2, #0
 8000378:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800037a:	4b12      	ldr	r3, [pc, #72]	; (80003c4 <MX_CAN1_Init+0x60>)
 800037c:	2200      	movs	r2, #0
 800037e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000380:	4b10      	ldr	r3, [pc, #64]	; (80003c4 <MX_CAN1_Init+0x60>)
 8000382:	2200      	movs	r2, #0
 8000384:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000386:	4b0f      	ldr	r3, [pc, #60]	; (80003c4 <MX_CAN1_Init+0x60>)
 8000388:	2200      	movs	r2, #0
 800038a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800038c:	4b0d      	ldr	r3, [pc, #52]	; (80003c4 <MX_CAN1_Init+0x60>)
 800038e:	2200      	movs	r2, #0
 8000390:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000392:	4b0c      	ldr	r3, [pc, #48]	; (80003c4 <MX_CAN1_Init+0x60>)
 8000394:	2200      	movs	r2, #0
 8000396:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000398:	4b0a      	ldr	r3, [pc, #40]	; (80003c4 <MX_CAN1_Init+0x60>)
 800039a:	2200      	movs	r2, #0
 800039c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800039e:	4b09      	ldr	r3, [pc, #36]	; (80003c4 <MX_CAN1_Init+0x60>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80003a4:	4b07      	ldr	r3, [pc, #28]	; (80003c4 <MX_CAN1_Init+0x60>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80003aa:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <MX_CAN1_Init+0x60>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80003b0:	4804      	ldr	r0, [pc, #16]	; (80003c4 <MX_CAN1_Init+0x60>)
 80003b2:	f000 fa1f 	bl	80007f4 <HAL_CAN_Init>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80003bc:	f000 f81e 	bl	80003fc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80003c0:	bf00      	nop
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	2000008c 	.word	0x2000008c
 80003c8:	40006400 	.word	0x40006400

080003cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d2:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <MX_GPIO_Init+0x2c>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d6:	4a08      	ldr	r2, [pc, #32]	; (80003f8 <MX_GPIO_Init+0x2c>)
 80003d8:	f043 0301 	orr.w	r3, r3, #1
 80003dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003de:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <MX_GPIO_Init+0x2c>)
 80003e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e2:	f003 0301 	and.w	r3, r3, #1
 80003e6:	607b      	str	r3, [r7, #4]
 80003e8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003ea:	bf00      	nop
 80003ec:	370c      	adds	r7, #12
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	40021000 	.word	0x40021000

080003fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000400:	b672      	cpsid	i
}
 8000402:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000404:	e7fe      	b.n	8000404 <Error_Handler+0x8>
	...

08000408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800040e:	4b0f      	ldr	r3, [pc, #60]	; (800044c <HAL_MspInit+0x44>)
 8000410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000412:	4a0e      	ldr	r2, [pc, #56]	; (800044c <HAL_MspInit+0x44>)
 8000414:	f043 0301 	orr.w	r3, r3, #1
 8000418:	6613      	str	r3, [r2, #96]	; 0x60
 800041a:	4b0c      	ldr	r3, [pc, #48]	; (800044c <HAL_MspInit+0x44>)
 800041c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800041e:	f003 0301 	and.w	r3, r3, #1
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000426:	4b09      	ldr	r3, [pc, #36]	; (800044c <HAL_MspInit+0x44>)
 8000428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800042a:	4a08      	ldr	r2, [pc, #32]	; (800044c <HAL_MspInit+0x44>)
 800042c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000430:	6593      	str	r3, [r2, #88]	; 0x58
 8000432:	4b06      	ldr	r3, [pc, #24]	; (800044c <HAL_MspInit+0x44>)
 8000434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800043a:	603b      	str	r3, [r7, #0]
 800043c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800043e:	bf00      	nop
 8000440:	370c      	adds	r7, #12
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	40021000 	.word	0x40021000

08000450 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b08a      	sub	sp, #40	; 0x28
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000458:	f107 0314 	add.w	r3, r7, #20
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]
 8000460:	605a      	str	r2, [r3, #4]
 8000462:	609a      	str	r2, [r3, #8]
 8000464:	60da      	str	r2, [r3, #12]
 8000466:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a18      	ldr	r2, [pc, #96]	; (80004d0 <HAL_CAN_MspInit+0x80>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d129      	bne.n	80004c6 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000472:	4b18      	ldr	r3, [pc, #96]	; (80004d4 <HAL_CAN_MspInit+0x84>)
 8000474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000476:	4a17      	ldr	r2, [pc, #92]	; (80004d4 <HAL_CAN_MspInit+0x84>)
 8000478:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800047c:	6593      	str	r3, [r2, #88]	; 0x58
 800047e:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <HAL_CAN_MspInit+0x84>)
 8000480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000486:	613b      	str	r3, [r7, #16]
 8000488:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800048a:	4b12      	ldr	r3, [pc, #72]	; (80004d4 <HAL_CAN_MspInit+0x84>)
 800048c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800048e:	4a11      	ldr	r2, [pc, #68]	; (80004d4 <HAL_CAN_MspInit+0x84>)
 8000490:	f043 0301 	orr.w	r3, r3, #1
 8000494:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000496:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <HAL_CAN_MspInit+0x84>)
 8000498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800049a:	f003 0301 	and.w	r3, r3, #1
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80004a2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80004a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004a8:	2302      	movs	r3, #2
 80004aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ac:	2300      	movs	r3, #0
 80004ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004b0:	2303      	movs	r3, #3
 80004b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80004b4:	2309      	movs	r3, #9
 80004b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b8:	f107 0314 	add.w	r3, r7, #20
 80004bc:	4619      	mov	r1, r3
 80004be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c2:	f000 fc49 	bl	8000d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80004c6:	bf00      	nop
 80004c8:	3728      	adds	r7, #40	; 0x28
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40006400 	.word	0x40006400
 80004d4:	40021000 	.word	0x40021000

080004d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004dc:	e7fe      	b.n	80004dc <NMI_Handler+0x4>

080004de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004e2:	e7fe      	b.n	80004e2 <HardFault_Handler+0x4>

080004e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <MemManage_Handler+0x4>

080004ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ee:	e7fe      	b.n	80004ee <BusFault_Handler+0x4>

080004f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <UsageFault_Handler+0x4>

080004f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004f6:	b480      	push	{r7}
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004fa:	bf00      	nop
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr

08000512 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000516:	bf00      	nop
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr

08000520 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000524:	f000 f922 	bl	800076c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}

0800052c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af00      	add	r7, sp, #0
 8000532:	60f8      	str	r0, [r7, #12]
 8000534:	60b9      	str	r1, [r7, #8]
 8000536:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000538:	2300      	movs	r3, #0
 800053a:	617b      	str	r3, [r7, #20]
 800053c:	e00a      	b.n	8000554 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800053e:	f3af 8000 	nop.w
 8000542:	4601      	mov	r1, r0
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	1c5a      	adds	r2, r3, #1
 8000548:	60ba      	str	r2, [r7, #8]
 800054a:	b2ca      	uxtb	r2, r1
 800054c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800054e:	697b      	ldr	r3, [r7, #20]
 8000550:	3301      	adds	r3, #1
 8000552:	617b      	str	r3, [r7, #20]
 8000554:	697a      	ldr	r2, [r7, #20]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	429a      	cmp	r2, r3
 800055a:	dbf0      	blt.n	800053e <_read+0x12>
  }

  return len;
 800055c:	687b      	ldr	r3, [r7, #4]
}
 800055e:	4618      	mov	r0, r3
 8000560:	3718      	adds	r7, #24
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}

08000566 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000566:	b480      	push	{r7}
 8000568:	b083      	sub	sp, #12
 800056a:	af00      	add	r7, sp, #0
 800056c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800056e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000572:	4618      	mov	r0, r3
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr

0800057e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800057e:	b480      	push	{r7}
 8000580:	b083      	sub	sp, #12
 8000582:	af00      	add	r7, sp, #0
 8000584:	6078      	str	r0, [r7, #4]
 8000586:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800058e:	605a      	str	r2, [r3, #4]
  return 0;
 8000590:	2300      	movs	r3, #0
}
 8000592:	4618      	mov	r0, r3
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <_isatty>:

int _isatty(int file)
{
 800059e:	b480      	push	{r7}
 80005a0:	b083      	sub	sp, #12
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005a6:	2301      	movs	r3, #1
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr

080005b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005c0:	2300      	movs	r3, #0
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
	...

080005d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005d8:	4a14      	ldr	r2, [pc, #80]	; (800062c <_sbrk+0x5c>)
 80005da:	4b15      	ldr	r3, [pc, #84]	; (8000630 <_sbrk+0x60>)
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005e4:	4b13      	ldr	r3, [pc, #76]	; (8000634 <_sbrk+0x64>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d102      	bne.n	80005f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005ec:	4b11      	ldr	r3, [pc, #68]	; (8000634 <_sbrk+0x64>)
 80005ee:	4a12      	ldr	r2, [pc, #72]	; (8000638 <_sbrk+0x68>)
 80005f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005f2:	4b10      	ldr	r3, [pc, #64]	; (8000634 <_sbrk+0x64>)
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4413      	add	r3, r2
 80005fa:	693a      	ldr	r2, [r7, #16]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d207      	bcs.n	8000610 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000600:	f001 fb80 	bl	8001d04 <__errno>
 8000604:	4603      	mov	r3, r0
 8000606:	220c      	movs	r2, #12
 8000608:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800060a:	f04f 33ff 	mov.w	r3, #4294967295
 800060e:	e009      	b.n	8000624 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000610:	4b08      	ldr	r3, [pc, #32]	; (8000634 <_sbrk+0x64>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000616:	4b07      	ldr	r3, [pc, #28]	; (8000634 <_sbrk+0x64>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4413      	add	r3, r2
 800061e:	4a05      	ldr	r2, [pc, #20]	; (8000634 <_sbrk+0x64>)
 8000620:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000622:	68fb      	ldr	r3, [r7, #12]
}
 8000624:	4618      	mov	r0, r3
 8000626:	3718      	adds	r7, #24
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20018000 	.word	0x20018000
 8000630:	00000400 	.word	0x00000400
 8000634:	200000b4 	.word	0x200000b4
 8000638:	200000d0 	.word	0x200000d0

0800063c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <SystemInit+0x20>)
 8000642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000646:	4a05      	ldr	r2, [pc, #20]	; (800065c <SystemInit+0x20>)
 8000648:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800064c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	e000ed00 	.word	0xe000ed00

08000660 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000660:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000698 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000664:	f7ff ffea 	bl	800063c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000668:	480c      	ldr	r0, [pc, #48]	; (800069c <LoopForever+0x6>)
  ldr r1, =_edata
 800066a:	490d      	ldr	r1, [pc, #52]	; (80006a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800066c:	4a0d      	ldr	r2, [pc, #52]	; (80006a4 <LoopForever+0xe>)
  movs r3, #0
 800066e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000670:	e002      	b.n	8000678 <LoopCopyDataInit>

08000672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000676:	3304      	adds	r3, #4

08000678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800067a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800067c:	d3f9      	bcc.n	8000672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800067e:	4a0a      	ldr	r2, [pc, #40]	; (80006a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000680:	4c0a      	ldr	r4, [pc, #40]	; (80006ac <LoopForever+0x16>)
  movs r3, #0
 8000682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000684:	e001      	b.n	800068a <LoopFillZerobss>

08000686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000688:	3204      	adds	r2, #4

0800068a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800068a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800068c:	d3fb      	bcc.n	8000686 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800068e:	f001 fb3f 	bl	8001d10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000692:	f7ff fddf 	bl	8000254 <main>

08000696 <LoopForever>:

LoopForever:
    b LoopForever
 8000696:	e7fe      	b.n	8000696 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000698:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800069c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80006a4:	08002830 	.word	0x08002830
  ldr r2, =_sbss
 80006a8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80006ac:	200000cc 	.word	0x200000cc

080006b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006b0:	e7fe      	b.n	80006b0 <ADC1_2_IRQHandler>
	...

080006b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006ba:	2300      	movs	r3, #0
 80006bc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006be:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <HAL_Init+0x3c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a0b      	ldr	r2, [pc, #44]	; (80006f0 <HAL_Init+0x3c>)
 80006c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ca:	2003      	movs	r0, #3
 80006cc:	f000 fb10 	bl	8000cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006d0:	2000      	movs	r0, #0
 80006d2:	f000 f80f 	bl	80006f4 <HAL_InitTick>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d002      	beq.n	80006e2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80006dc:	2301      	movs	r3, #1
 80006de:	71fb      	strb	r3, [r7, #7]
 80006e0:	e001      	b.n	80006e6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006e2:	f7ff fe91 	bl	8000408 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006e6:	79fb      	ldrb	r3, [r7, #7]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40022000 	.word	0x40022000

080006f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006fc:	2300      	movs	r3, #0
 80006fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000700:	4b17      	ldr	r3, [pc, #92]	; (8000760 <HAL_InitTick+0x6c>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d023      	beq.n	8000750 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000708:	4b16      	ldr	r3, [pc, #88]	; (8000764 <HAL_InitTick+0x70>)
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	4b14      	ldr	r3, [pc, #80]	; (8000760 <HAL_InitTick+0x6c>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	4619      	mov	r1, r3
 8000712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000716:	fbb3 f3f1 	udiv	r3, r3, r1
 800071a:	fbb2 f3f3 	udiv	r3, r2, r3
 800071e:	4618      	mov	r0, r3
 8000720:	f000 fb0d 	bl	8000d3e <HAL_SYSTICK_Config>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d10f      	bne.n	800074a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2b0f      	cmp	r3, #15
 800072e:	d809      	bhi.n	8000744 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000730:	2200      	movs	r2, #0
 8000732:	6879      	ldr	r1, [r7, #4]
 8000734:	f04f 30ff 	mov.w	r0, #4294967295
 8000738:	f000 fae5 	bl	8000d06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800073c:	4a0a      	ldr	r2, [pc, #40]	; (8000768 <HAL_InitTick+0x74>)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	6013      	str	r3, [r2, #0]
 8000742:	e007      	b.n	8000754 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000744:	2301      	movs	r3, #1
 8000746:	73fb      	strb	r3, [r7, #15]
 8000748:	e004      	b.n	8000754 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800074a:	2301      	movs	r3, #1
 800074c:	73fb      	strb	r3, [r7, #15]
 800074e:	e001      	b.n	8000754 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000750:	2301      	movs	r3, #1
 8000752:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000754:	7bfb      	ldrb	r3, [r7, #15]
}
 8000756:	4618      	mov	r0, r3
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000008 	.word	0x20000008
 8000764:	20000000 	.word	0x20000000
 8000768:	20000004 	.word	0x20000004

0800076c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <HAL_IncTick+0x20>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	461a      	mov	r2, r3
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <HAL_IncTick+0x24>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4413      	add	r3, r2
 800077c:	4a04      	ldr	r2, [pc, #16]	; (8000790 <HAL_IncTick+0x24>)
 800077e:	6013      	str	r3, [r2, #0]
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	20000008 	.word	0x20000008
 8000790:	200000b8 	.word	0x200000b8

08000794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  return uwTick;
 8000798:	4b03      	ldr	r3, [pc, #12]	; (80007a8 <HAL_GetTick+0x14>)
 800079a:	681b      	ldr	r3, [r3, #0]
}
 800079c:	4618      	mov	r0, r3
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	200000b8 	.word	0x200000b8

080007ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007b4:	f7ff ffee 	bl	8000794 <HAL_GetTick>
 80007b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007c4:	d005      	beq.n	80007d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80007c6:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <HAL_Delay+0x44>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	461a      	mov	r2, r3
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	4413      	add	r3, r2
 80007d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007d2:	bf00      	nop
 80007d4:	f7ff ffde 	bl	8000794 <HAL_GetTick>
 80007d8:	4602      	mov	r2, r0
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	1ad3      	subs	r3, r2, r3
 80007de:	68fa      	ldr	r2, [r7, #12]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d8f7      	bhi.n	80007d4 <HAL_Delay+0x28>
  {
  }
}
 80007e4:	bf00      	nop
 80007e6:	bf00      	nop
 80007e8:	3710      	adds	r7, #16
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000008 	.word	0x20000008

080007f4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d101      	bne.n	8000806 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000802:	2301      	movs	r3, #1
 8000804:	e0ed      	b.n	80009e2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	f893 3020 	ldrb.w	r3, [r3, #32]
 800080c:	b2db      	uxtb	r3, r3
 800080e:	2b00      	cmp	r3, #0
 8000810:	d102      	bne.n	8000818 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f7ff fe1c 	bl	8000450 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f042 0201 	orr.w	r2, r2, #1
 8000826:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000828:	f7ff ffb4 	bl	8000794 <HAL_GetTick>
 800082c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800082e:	e012      	b.n	8000856 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000830:	f7ff ffb0 	bl	8000794 <HAL_GetTick>
 8000834:	4602      	mov	r2, r0
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	2b0a      	cmp	r3, #10
 800083c:	d90b      	bls.n	8000856 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000842:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	2205      	movs	r2, #5
 800084e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000852:	2301      	movs	r3, #1
 8000854:	e0c5      	b.n	80009e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	f003 0301 	and.w	r3, r3, #1
 8000860:	2b00      	cmp	r3, #0
 8000862:	d0e5      	beq.n	8000830 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f022 0202 	bic.w	r2, r2, #2
 8000872:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000874:	f7ff ff8e 	bl	8000794 <HAL_GetTick>
 8000878:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800087a:	e012      	b.n	80008a2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800087c:	f7ff ff8a 	bl	8000794 <HAL_GetTick>
 8000880:	4602      	mov	r2, r0
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	2b0a      	cmp	r3, #10
 8000888:	d90b      	bls.n	80008a2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800088e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2205      	movs	r2, #5
 800089a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800089e:	2301      	movs	r3, #1
 80008a0:	e09f      	b.n	80009e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	f003 0302 	and.w	r3, r3, #2
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d1e5      	bne.n	800087c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	7e1b      	ldrb	r3, [r3, #24]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d108      	bne.n	80008ca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	e007      	b.n	80008da <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80008d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	7e5b      	ldrb	r3, [r3, #25]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d108      	bne.n	80008f4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	e007      	b.n	8000904 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000902:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	7e9b      	ldrb	r3, [r3, #26]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d108      	bne.n	800091e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f042 0220 	orr.w	r2, r2, #32
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	e007      	b.n	800092e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f022 0220 	bic.w	r2, r2, #32
 800092c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	7edb      	ldrb	r3, [r3, #27]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d108      	bne.n	8000948 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f022 0210 	bic.w	r2, r2, #16
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	e007      	b.n	8000958 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f042 0210 	orr.w	r2, r2, #16
 8000956:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	7f1b      	ldrb	r3, [r3, #28]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d108      	bne.n	8000972 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f042 0208 	orr.w	r2, r2, #8
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	e007      	b.n	8000982 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f022 0208 	bic.w	r2, r2, #8
 8000980:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	7f5b      	ldrb	r3, [r3, #29]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d108      	bne.n	800099c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f042 0204 	orr.w	r2, r2, #4
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	e007      	b.n	80009ac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f022 0204 	bic.w	r2, r2, #4
 80009aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	689a      	ldr	r2, [r3, #8]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	431a      	orrs	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	691b      	ldr	r3, [r3, #16]
 80009ba:	431a      	orrs	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	695b      	ldr	r3, [r3, #20]
 80009c0:	ea42 0103 	orr.w	r1, r2, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	1e5a      	subs	r2, r3, #1
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	430a      	orrs	r2, r1
 80009d0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2200      	movs	r2, #0
 80009d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2201      	movs	r2, #1
 80009dc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80009e0:	2300      	movs	r3, #0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80009ea:	b480      	push	{r7}
 80009ec:	b089      	sub	sp, #36	; 0x24
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	60f8      	str	r0, [r7, #12]
 80009f2:	60b9      	str	r1, [r7, #8]
 80009f4:	607a      	str	r2, [r7, #4]
 80009f6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000a08:	7ffb      	ldrb	r3, [r7, #31]
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d003      	beq.n	8000a16 <HAL_CAN_AddTxMessage+0x2c>
 8000a0e:	7ffb      	ldrb	r3, [r7, #31]
 8000a10:	2b02      	cmp	r3, #2
 8000a12:	f040 80ad 	bne.w	8000b70 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000a16:	69bb      	ldr	r3, [r7, #24]
 8000a18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d10a      	bne.n	8000a36 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000a20:	69bb      	ldr	r3, [r7, #24]
 8000a22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d105      	bne.n	8000a36 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000a2a:	69bb      	ldr	r3, [r7, #24]
 8000a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	f000 8095 	beq.w	8000b60 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000a36:	69bb      	ldr	r3, [r7, #24]
 8000a38:	0e1b      	lsrs	r3, r3, #24
 8000a3a:	f003 0303 	and.w	r3, r3, #3
 8000a3e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000a40:	2201      	movs	r2, #1
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	409a      	lsls	r2, r3
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	689b      	ldr	r3, [r3, #8]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d10d      	bne.n	8000a6e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000a5c:	68f9      	ldr	r1, [r7, #12]
 8000a5e:	6809      	ldr	r1, [r1, #0]
 8000a60:	431a      	orrs	r2, r3
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	3318      	adds	r3, #24
 8000a66:	011b      	lsls	r3, r3, #4
 8000a68:	440b      	add	r3, r1
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	e00f      	b.n	8000a8e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a78:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a7e:	68f9      	ldr	r1, [r7, #12]
 8000a80:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000a82:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	3318      	adds	r3, #24
 8000a88:	011b      	lsls	r3, r3, #4
 8000a8a:	440b      	add	r3, r1
 8000a8c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	6819      	ldr	r1, [r3, #0]
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	691a      	ldr	r2, [r3, #16]
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	3318      	adds	r3, #24
 8000a9a:	011b      	lsls	r3, r3, #4
 8000a9c:	440b      	add	r3, r1
 8000a9e:	3304      	adds	r3, #4
 8000aa0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	7d1b      	ldrb	r3, [r3, #20]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d111      	bne.n	8000ace <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	3318      	adds	r3, #24
 8000ab2:	011b      	lsls	r3, r3, #4
 8000ab4:	4413      	add	r3, r2
 8000ab6:	3304      	adds	r3, #4
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	6811      	ldr	r1, [r2, #0]
 8000abe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	3318      	adds	r3, #24
 8000ac6:	011b      	lsls	r3, r3, #4
 8000ac8:	440b      	add	r3, r1
 8000aca:	3304      	adds	r3, #4
 8000acc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	3307      	adds	r3, #7
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	061a      	lsls	r2, r3, #24
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	3306      	adds	r3, #6
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	041b      	lsls	r3, r3, #16
 8000ade:	431a      	orrs	r2, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3305      	adds	r3, #5
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	021b      	lsls	r3, r3, #8
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	3204      	adds	r2, #4
 8000aee:	7812      	ldrb	r2, [r2, #0]
 8000af0:	4610      	mov	r0, r2
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	6811      	ldr	r1, [r2, #0]
 8000af6:	ea43 0200 	orr.w	r2, r3, r0
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	011b      	lsls	r3, r3, #4
 8000afe:	440b      	add	r3, r1
 8000b00:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000b04:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	3303      	adds	r3, #3
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	061a      	lsls	r2, r3, #24
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	3302      	adds	r3, #2
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	041b      	lsls	r3, r3, #16
 8000b16:	431a      	orrs	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	021b      	lsls	r3, r3, #8
 8000b20:	4313      	orrs	r3, r2
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	7812      	ldrb	r2, [r2, #0]
 8000b26:	4610      	mov	r0, r2
 8000b28:	68fa      	ldr	r2, [r7, #12]
 8000b2a:	6811      	ldr	r1, [r2, #0]
 8000b2c:	ea43 0200 	orr.w	r2, r3, r0
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	011b      	lsls	r3, r3, #4
 8000b34:	440b      	add	r3, r1
 8000b36:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000b3a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	3318      	adds	r3, #24
 8000b44:	011b      	lsls	r3, r3, #4
 8000b46:	4413      	add	r3, r2
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	6811      	ldr	r1, [r2, #0]
 8000b4e:	f043 0201 	orr.w	r2, r3, #1
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	3318      	adds	r3, #24
 8000b56:	011b      	lsls	r3, r3, #4
 8000b58:	440b      	add	r3, r1
 8000b5a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	e00e      	b.n	8000b7e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b64:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e006      	b.n	8000b7e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b74:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b7c:	2301      	movs	r3, #1
  }
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3724      	adds	r7, #36	; 0x24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
	...

08000b8c <__NVIC_SetPriorityGrouping>:
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba2:	68ba      	ldr	r2, [r7, #8]
 8000ba4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba8:	4013      	ands	r3, r2
 8000baa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bbe:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	60d3      	str	r3, [r2, #12]
}
 8000bc4:	bf00      	nop
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <__NVIC_GetPriorityGrouping>:
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd8:	4b04      	ldr	r3, [pc, #16]	; (8000bec <__NVIC_GetPriorityGrouping+0x18>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	0a1b      	lsrs	r3, r3, #8
 8000bde:	f003 0307 	and.w	r3, r3, #7
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <__NVIC_SetPriority>:
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	6039      	str	r1, [r7, #0]
 8000bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	db0a      	blt.n	8000c1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	490c      	ldr	r1, [pc, #48]	; (8000c3c <__NVIC_SetPriority+0x4c>)
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	0112      	lsls	r2, r2, #4
 8000c10:	b2d2      	uxtb	r2, r2
 8000c12:	440b      	add	r3, r1
 8000c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c18:	e00a      	b.n	8000c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	4908      	ldr	r1, [pc, #32]	; (8000c40 <__NVIC_SetPriority+0x50>)
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	f003 030f 	and.w	r3, r3, #15
 8000c26:	3b04      	subs	r3, #4
 8000c28:	0112      	lsls	r2, r2, #4
 8000c2a:	b2d2      	uxtb	r2, r2
 8000c2c:	440b      	add	r3, r1
 8000c2e:	761a      	strb	r2, [r3, #24]
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000e100 	.word	0xe000e100
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <NVIC_EncodePriority>:
{
 8000c44:	b480      	push	{r7}
 8000c46:	b089      	sub	sp, #36	; 0x24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	f1c3 0307 	rsb	r3, r3, #7
 8000c5e:	2b04      	cmp	r3, #4
 8000c60:	bf28      	it	cs
 8000c62:	2304      	movcs	r3, #4
 8000c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	3304      	adds	r3, #4
 8000c6a:	2b06      	cmp	r3, #6
 8000c6c:	d902      	bls.n	8000c74 <NVIC_EncodePriority+0x30>
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3b03      	subs	r3, #3
 8000c72:	e000      	b.n	8000c76 <NVIC_EncodePriority+0x32>
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c78:	f04f 32ff 	mov.w	r2, #4294967295
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43da      	mvns	r2, r3
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	401a      	ands	r2, r3
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	fa01 f303 	lsl.w	r3, r1, r3
 8000c96:	43d9      	mvns	r1, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c9c:	4313      	orrs	r3, r2
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3724      	adds	r7, #36	; 0x24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
	...

08000cac <SysTick_Config>:
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cbc:	d301      	bcc.n	8000cc2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e00f      	b.n	8000ce2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <SysTick_Config+0x40>)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cca:	210f      	movs	r1, #15
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd0:	f7ff ff8e 	bl	8000bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <SysTick_Config+0x40>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cda:	4b04      	ldr	r3, [pc, #16]	; (8000cec <SysTick_Config+0x40>)
 8000cdc:	2207      	movs	r2, #7
 8000cde:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	e000e010 	.word	0xe000e010

08000cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f7ff ff47 	bl	8000b8c <__NVIC_SetPriorityGrouping>
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b086      	sub	sp, #24
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	60b9      	str	r1, [r7, #8]
 8000d10:	607a      	str	r2, [r7, #4]
 8000d12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d18:	f7ff ff5c 	bl	8000bd4 <__NVIC_GetPriorityGrouping>
 8000d1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	68b9      	ldr	r1, [r7, #8]
 8000d22:	6978      	ldr	r0, [r7, #20]
 8000d24:	f7ff ff8e 	bl	8000c44 <NVIC_EncodePriority>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2e:	4611      	mov	r1, r2
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ff5d 	bl	8000bf0 <__NVIC_SetPriority>
}
 8000d36:	bf00      	nop
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff ffb0 	bl	8000cac <SysTick_Config>
 8000d4c:	4603      	mov	r3, r0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b087      	sub	sp, #28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d66:	e17f      	b.n	8001068 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	fa01 f303 	lsl.w	r3, r1, r3
 8000d74:	4013      	ands	r3, r2
 8000d76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f000 8171 	beq.w	8001062 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f003 0303 	and.w	r3, r3, #3
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d005      	beq.n	8000d98 <HAL_GPIO_Init+0x40>
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 0303 	and.w	r3, r3, #3
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d130      	bne.n	8000dfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	2203      	movs	r2, #3
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	68da      	ldr	r2, [r3, #12]
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dce:	2201      	movs	r2, #1
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	091b      	lsrs	r3, r3, #4
 8000de4:	f003 0201 	and.w	r2, r3, #1
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 0303 	and.w	r3, r3, #3
 8000e02:	2b03      	cmp	r3, #3
 8000e04:	d118      	bne.n	8000e38 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	08db      	lsrs	r3, r3, #3
 8000e22:	f003 0201 	and.w	r2, r3, #1
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 0303 	and.w	r3, r3, #3
 8000e40:	2b03      	cmp	r3, #3
 8000e42:	d017      	beq.n	8000e74 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	2203      	movs	r2, #3
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 0303 	and.w	r3, r3, #3
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d123      	bne.n	8000ec8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	08da      	lsrs	r2, r3, #3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3208      	adds	r2, #8
 8000e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	f003 0307 	and.w	r3, r3, #7
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	220f      	movs	r2, #15
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	691a      	ldr	r2, [r3, #16]
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	08da      	lsrs	r2, r3, #3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3208      	adds	r2, #8
 8000ec2:	6939      	ldr	r1, [r7, #16]
 8000ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 0203 	and.w	r2, r3, #3
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f000 80ac 	beq.w	8001062 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0a:	4b5f      	ldr	r3, [pc, #380]	; (8001088 <HAL_GPIO_Init+0x330>)
 8000f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f0e:	4a5e      	ldr	r2, [pc, #376]	; (8001088 <HAL_GPIO_Init+0x330>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6613      	str	r3, [r2, #96]	; 0x60
 8000f16:	4b5c      	ldr	r3, [pc, #368]	; (8001088 <HAL_GPIO_Init+0x330>)
 8000f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f22:	4a5a      	ldr	r2, [pc, #360]	; (800108c <HAL_GPIO_Init+0x334>)
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	089b      	lsrs	r3, r3, #2
 8000f28:	3302      	adds	r3, #2
 8000f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	f003 0303 	and.w	r3, r3, #3
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	220f      	movs	r2, #15
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4013      	ands	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f4c:	d025      	beq.n	8000f9a <HAL_GPIO_Init+0x242>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a4f      	ldr	r2, [pc, #316]	; (8001090 <HAL_GPIO_Init+0x338>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d01f      	beq.n	8000f96 <HAL_GPIO_Init+0x23e>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a4e      	ldr	r2, [pc, #312]	; (8001094 <HAL_GPIO_Init+0x33c>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d019      	beq.n	8000f92 <HAL_GPIO_Init+0x23a>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a4d      	ldr	r2, [pc, #308]	; (8001098 <HAL_GPIO_Init+0x340>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d013      	beq.n	8000f8e <HAL_GPIO_Init+0x236>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4c      	ldr	r2, [pc, #304]	; (800109c <HAL_GPIO_Init+0x344>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d00d      	beq.n	8000f8a <HAL_GPIO_Init+0x232>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4b      	ldr	r2, [pc, #300]	; (80010a0 <HAL_GPIO_Init+0x348>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d007      	beq.n	8000f86 <HAL_GPIO_Init+0x22e>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a4a      	ldr	r2, [pc, #296]	; (80010a4 <HAL_GPIO_Init+0x34c>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d101      	bne.n	8000f82 <HAL_GPIO_Init+0x22a>
 8000f7e:	2306      	movs	r3, #6
 8000f80:	e00c      	b.n	8000f9c <HAL_GPIO_Init+0x244>
 8000f82:	2307      	movs	r3, #7
 8000f84:	e00a      	b.n	8000f9c <HAL_GPIO_Init+0x244>
 8000f86:	2305      	movs	r3, #5
 8000f88:	e008      	b.n	8000f9c <HAL_GPIO_Init+0x244>
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	e006      	b.n	8000f9c <HAL_GPIO_Init+0x244>
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e004      	b.n	8000f9c <HAL_GPIO_Init+0x244>
 8000f92:	2302      	movs	r3, #2
 8000f94:	e002      	b.n	8000f9c <HAL_GPIO_Init+0x244>
 8000f96:	2301      	movs	r3, #1
 8000f98:	e000      	b.n	8000f9c <HAL_GPIO_Init+0x244>
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	f002 0203 	and.w	r2, r2, #3
 8000fa2:	0092      	lsls	r2, r2, #2
 8000fa4:	4093      	lsls	r3, r2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fac:	4937      	ldr	r1, [pc, #220]	; (800108c <HAL_GPIO_Init+0x334>)
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	089b      	lsrs	r3, r3, #2
 8000fb2:	3302      	adds	r3, #2
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fba:	4b3b      	ldr	r3, [pc, #236]	; (80010a8 <HAL_GPIO_Init+0x350>)
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fde:	4a32      	ldr	r2, [pc, #200]	; (80010a8 <HAL_GPIO_Init+0x350>)
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fe4:	4b30      	ldr	r3, [pc, #192]	; (80010a8 <HAL_GPIO_Init+0x350>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	43db      	mvns	r3, r3
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001008:	4a27      	ldr	r2, [pc, #156]	; (80010a8 <HAL_GPIO_Init+0x350>)
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800100e:	4b26      	ldr	r3, [pc, #152]	; (80010a8 <HAL_GPIO_Init+0x350>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	43db      	mvns	r3, r3
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4013      	ands	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4313      	orrs	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001032:	4a1d      	ldr	r2, [pc, #116]	; (80010a8 <HAL_GPIO_Init+0x350>)
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001038:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <HAL_GPIO_Init+0x350>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	43db      	mvns	r3, r3
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4013      	ands	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800105c:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <HAL_GPIO_Init+0x350>)
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3301      	adds	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa22 f303 	lsr.w	r3, r2, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	f47f ae78 	bne.w	8000d68 <HAL_GPIO_Init+0x10>
  }
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	371c      	adds	r7, #28
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	40021000 	.word	0x40021000
 800108c:	40010000 	.word	0x40010000
 8001090:	48000400 	.word	0x48000400
 8001094:	48000800 	.word	0x48000800
 8001098:	48000c00 	.word	0x48000c00
 800109c:	48001000 	.word	0x48001000
 80010a0:	48001400 	.word	0x48001400
 80010a4:	48001800 	.word	0x48001800
 80010a8:	40010400 	.word	0x40010400

080010ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010b0:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40007000 	.word	0x40007000

080010c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010d6:	d130      	bne.n	800113a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010d8:	4b23      	ldr	r3, [pc, #140]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010e4:	d038      	beq.n	8001158 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e6:	4b20      	ldr	r3, [pc, #128]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010ee:	4a1e      	ldr	r2, [pc, #120]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010f6:	4b1d      	ldr	r3, [pc, #116]	; (800116c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2232      	movs	r2, #50	; 0x32
 80010fc:	fb02 f303 	mul.w	r3, r2, r3
 8001100:	4a1b      	ldr	r2, [pc, #108]	; (8001170 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001102:	fba2 2303 	umull	r2, r3, r2, r3
 8001106:	0c9b      	lsrs	r3, r3, #18
 8001108:	3301      	adds	r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800110c:	e002      	b.n	8001114 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	3b01      	subs	r3, #1
 8001112:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800111c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001120:	d102      	bne.n	8001128 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1f2      	bne.n	800110e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800112a:	695b      	ldr	r3, [r3, #20]
 800112c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001130:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001134:	d110      	bne.n	8001158 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e00f      	b.n	800115a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001146:	d007      	beq.n	8001158 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001148:	4b07      	ldr	r3, [pc, #28]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001150:	4a05      	ldr	r2, [pc, #20]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001152:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001156:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40007000 	.word	0x40007000
 800116c:	20000000 	.word	0x20000000
 8001170:	431bde83 	.word	0x431bde83

08001174 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b088      	sub	sp, #32
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d101      	bne.n	8001186 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e3ca      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001186:	4b97      	ldr	r3, [pc, #604]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f003 030c 	and.w	r3, r3, #12
 800118e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001190:	4b94      	ldr	r3, [pc, #592]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	f003 0303 	and.w	r3, r3, #3
 8001198:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0310 	and.w	r3, r3, #16
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f000 80e4 	beq.w	8001370 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d007      	beq.n	80011be <HAL_RCC_OscConfig+0x4a>
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	2b0c      	cmp	r3, #12
 80011b2:	f040 808b 	bne.w	80012cc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	f040 8087 	bne.w	80012cc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011be:	4b89      	ldr	r3, [pc, #548]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d005      	beq.n	80011d6 <HAL_RCC_OscConfig+0x62>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d101      	bne.n	80011d6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e3a2      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a1a      	ldr	r2, [r3, #32]
 80011da:	4b82      	ldr	r3, [pc, #520]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0308 	and.w	r3, r3, #8
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d004      	beq.n	80011f0 <HAL_RCC_OscConfig+0x7c>
 80011e6:	4b7f      	ldr	r3, [pc, #508]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011ee:	e005      	b.n	80011fc <HAL_RCC_OscConfig+0x88>
 80011f0:	4b7c      	ldr	r3, [pc, #496]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 80011f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011f6:	091b      	lsrs	r3, r3, #4
 80011f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d223      	bcs.n	8001248 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a1b      	ldr	r3, [r3, #32]
 8001204:	4618      	mov	r0, r3
 8001206:	f000 fd1d 	bl	8001c44 <RCC_SetFlashLatencyFromMSIRange>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e383      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001214:	4b73      	ldr	r3, [pc, #460]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a72      	ldr	r2, [pc, #456]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 800121a:	f043 0308 	orr.w	r3, r3, #8
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	4b70      	ldr	r3, [pc, #448]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a1b      	ldr	r3, [r3, #32]
 800122c:	496d      	ldr	r1, [pc, #436]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 800122e:	4313      	orrs	r3, r2
 8001230:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001232:	4b6c      	ldr	r3, [pc, #432]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	021b      	lsls	r3, r3, #8
 8001240:	4968      	ldr	r1, [pc, #416]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 8001242:	4313      	orrs	r3, r2
 8001244:	604b      	str	r3, [r1, #4]
 8001246:	e025      	b.n	8001294 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001248:	4b66      	ldr	r3, [pc, #408]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a65      	ldr	r2, [pc, #404]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 800124e:	f043 0308 	orr.w	r3, r3, #8
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	4b63      	ldr	r3, [pc, #396]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	4960      	ldr	r1, [pc, #384]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 8001262:	4313      	orrs	r3, r2
 8001264:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001266:	4b5f      	ldr	r3, [pc, #380]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	021b      	lsls	r3, r3, #8
 8001274:	495b      	ldr	r1, [pc, #364]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 8001276:	4313      	orrs	r3, r2
 8001278:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d109      	bne.n	8001294 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a1b      	ldr	r3, [r3, #32]
 8001284:	4618      	mov	r0, r3
 8001286:	f000 fcdd 	bl	8001c44 <RCC_SetFlashLatencyFromMSIRange>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e343      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001294:	f000 fc4a 	bl	8001b2c <HAL_RCC_GetSysClockFreq>
 8001298:	4602      	mov	r2, r0
 800129a:	4b52      	ldr	r3, [pc, #328]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	091b      	lsrs	r3, r3, #4
 80012a0:	f003 030f 	and.w	r3, r3, #15
 80012a4:	4950      	ldr	r1, [pc, #320]	; (80013e8 <HAL_RCC_OscConfig+0x274>)
 80012a6:	5ccb      	ldrb	r3, [r1, r3]
 80012a8:	f003 031f 	and.w	r3, r3, #31
 80012ac:	fa22 f303 	lsr.w	r3, r2, r3
 80012b0:	4a4e      	ldr	r2, [pc, #312]	; (80013ec <HAL_RCC_OscConfig+0x278>)
 80012b2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012b4:	4b4e      	ldr	r3, [pc, #312]	; (80013f0 <HAL_RCC_OscConfig+0x27c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fa1b 	bl	80006f4 <HAL_InitTick>
 80012be:	4603      	mov	r3, r0
 80012c0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d052      	beq.n	800136e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	e327      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d032      	beq.n	800133a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012d4:	4b43      	ldr	r3, [pc, #268]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a42      	ldr	r2, [pc, #264]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012e0:	f7ff fa58 	bl	8000794 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012e8:	f7ff fa54 	bl	8000794 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e310      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012fa:	4b3a      	ldr	r3, [pc, #232]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0f0      	beq.n	80012e8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001306:	4b37      	ldr	r3, [pc, #220]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a36      	ldr	r2, [pc, #216]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 800130c:	f043 0308 	orr.w	r3, r3, #8
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	4b34      	ldr	r3, [pc, #208]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a1b      	ldr	r3, [r3, #32]
 800131e:	4931      	ldr	r1, [pc, #196]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 8001320:	4313      	orrs	r3, r2
 8001322:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001324:	4b2f      	ldr	r3, [pc, #188]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	69db      	ldr	r3, [r3, #28]
 8001330:	021b      	lsls	r3, r3, #8
 8001332:	492c      	ldr	r1, [pc, #176]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 8001334:	4313      	orrs	r3, r2
 8001336:	604b      	str	r3, [r1, #4]
 8001338:	e01a      	b.n	8001370 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800133a:	4b2a      	ldr	r3, [pc, #168]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a29      	ldr	r2, [pc, #164]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 8001340:	f023 0301 	bic.w	r3, r3, #1
 8001344:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001346:	f7ff fa25 	bl	8000794 <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800134e:	f7ff fa21 	bl	8000794 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e2dd      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001360:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1f0      	bne.n	800134e <HAL_RCC_OscConfig+0x1da>
 800136c:	e000      	b.n	8001370 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800136e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	2b00      	cmp	r3, #0
 800137a:	d074      	beq.n	8001466 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	2b08      	cmp	r3, #8
 8001380:	d005      	beq.n	800138e <HAL_RCC_OscConfig+0x21a>
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	2b0c      	cmp	r3, #12
 8001386:	d10e      	bne.n	80013a6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	2b03      	cmp	r3, #3
 800138c:	d10b      	bne.n	80013a6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d064      	beq.n	8001464 <HAL_RCC_OscConfig+0x2f0>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d160      	bne.n	8001464 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e2ba      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ae:	d106      	bne.n	80013be <HAL_RCC_OscConfig+0x24a>
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a0b      	ldr	r2, [pc, #44]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 80013b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	e026      	b.n	800140c <HAL_RCC_OscConfig+0x298>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013c6:	d115      	bne.n	80013f4 <HAL_RCC_OscConfig+0x280>
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a05      	ldr	r2, [pc, #20]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 80013ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a02      	ldr	r2, [pc, #8]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 80013da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	e014      	b.n	800140c <HAL_RCC_OscConfig+0x298>
 80013e2:	bf00      	nop
 80013e4:	40021000 	.word	0x40021000
 80013e8:	08002784 	.word	0x08002784
 80013ec:	20000000 	.word	0x20000000
 80013f0:	20000004 	.word	0x20000004
 80013f4:	4ba0      	ldr	r3, [pc, #640]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a9f      	ldr	r2, [pc, #636]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 80013fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	4b9d      	ldr	r3, [pc, #628]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a9c      	ldr	r2, [pc, #624]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 8001406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800140a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d013      	beq.n	800143c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001414:	f7ff f9be 	bl	8000794 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800141c:	f7ff f9ba 	bl	8000794 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b64      	cmp	r3, #100	; 0x64
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e276      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800142e:	4b92      	ldr	r3, [pc, #584]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f0      	beq.n	800141c <HAL_RCC_OscConfig+0x2a8>
 800143a:	e014      	b.n	8001466 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143c:	f7ff f9aa 	bl	8000794 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001444:	f7ff f9a6 	bl	8000794 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b64      	cmp	r3, #100	; 0x64
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e262      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001456:	4b88      	ldr	r3, [pc, #544]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f0      	bne.n	8001444 <HAL_RCC_OscConfig+0x2d0>
 8001462:	e000      	b.n	8001466 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d060      	beq.n	8001534 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	2b04      	cmp	r3, #4
 8001476:	d005      	beq.n	8001484 <HAL_RCC_OscConfig+0x310>
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	2b0c      	cmp	r3, #12
 800147c:	d119      	bne.n	80014b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	2b02      	cmp	r3, #2
 8001482:	d116      	bne.n	80014b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001484:	4b7c      	ldr	r3, [pc, #496]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800148c:	2b00      	cmp	r3, #0
 800148e:	d005      	beq.n	800149c <HAL_RCC_OscConfig+0x328>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e23f      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149c:	4b76      	ldr	r3, [pc, #472]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	691b      	ldr	r3, [r3, #16]
 80014a8:	061b      	lsls	r3, r3, #24
 80014aa:	4973      	ldr	r1, [pc, #460]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 80014ac:	4313      	orrs	r3, r2
 80014ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014b0:	e040      	b.n	8001534 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d023      	beq.n	8001502 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ba:	4b6f      	ldr	r3, [pc, #444]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a6e      	ldr	r2, [pc, #440]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 80014c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c6:	f7ff f965 	bl	8000794 <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ce:	f7ff f961 	bl	8000794 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e21d      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014e0:	4b65      	ldr	r3, [pc, #404]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0f0      	beq.n	80014ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ec:	4b62      	ldr	r3, [pc, #392]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	691b      	ldr	r3, [r3, #16]
 80014f8:	061b      	lsls	r3, r3, #24
 80014fa:	495f      	ldr	r1, [pc, #380]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	604b      	str	r3, [r1, #4]
 8001500:	e018      	b.n	8001534 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001502:	4b5d      	ldr	r3, [pc, #372]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a5c      	ldr	r2, [pc, #368]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 8001508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800150c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150e:	f7ff f941 	bl	8000794 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001516:	f7ff f93d 	bl	8000794 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e1f9      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001528:	4b53      	ldr	r3, [pc, #332]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1f0      	bne.n	8001516 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	2b00      	cmp	r3, #0
 800153e:	d03c      	beq.n	80015ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	695b      	ldr	r3, [r3, #20]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d01c      	beq.n	8001582 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001548:	4b4b      	ldr	r3, [pc, #300]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 800154a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800154e:	4a4a      	ldr	r2, [pc, #296]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001558:	f7ff f91c 	bl	8000794 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001560:	f7ff f918 	bl	8000794 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e1d4      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001572:	4b41      	ldr	r3, [pc, #260]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 8001574:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0ef      	beq.n	8001560 <HAL_RCC_OscConfig+0x3ec>
 8001580:	e01b      	b.n	80015ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001582:	4b3d      	ldr	r3, [pc, #244]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 8001584:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001588:	4a3b      	ldr	r2, [pc, #236]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 800158a:	f023 0301 	bic.w	r3, r3, #1
 800158e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001592:	f7ff f8ff 	bl	8000794 <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800159a:	f7ff f8fb 	bl	8000794 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e1b7      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015ac:	4b32      	ldr	r3, [pc, #200]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 80015ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1ef      	bne.n	800159a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0304 	and.w	r3, r3, #4
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f000 80a6 	beq.w	8001714 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015c8:	2300      	movs	r3, #0
 80015ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015cc:	4b2a      	ldr	r3, [pc, #168]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 80015ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d10d      	bne.n	80015f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015d8:	4b27      	ldr	r3, [pc, #156]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 80015da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015dc:	4a26      	ldr	r2, [pc, #152]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 80015de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e2:	6593      	str	r3, [r2, #88]	; 0x58
 80015e4:	4b24      	ldr	r3, [pc, #144]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 80015e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015f0:	2301      	movs	r3, #1
 80015f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015f4:	4b21      	ldr	r3, [pc, #132]	; (800167c <HAL_RCC_OscConfig+0x508>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d118      	bne.n	8001632 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001600:	4b1e      	ldr	r3, [pc, #120]	; (800167c <HAL_RCC_OscConfig+0x508>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a1d      	ldr	r2, [pc, #116]	; (800167c <HAL_RCC_OscConfig+0x508>)
 8001606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800160a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800160c:	f7ff f8c2 	bl	8000794 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001614:	f7ff f8be 	bl	8000794 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e17a      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001626:	4b15      	ldr	r3, [pc, #84]	; (800167c <HAL_RCC_OscConfig+0x508>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0f0      	beq.n	8001614 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d108      	bne.n	800164c <HAL_RCC_OscConfig+0x4d8>
 800163a:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 800163c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001640:	4a0d      	ldr	r2, [pc, #52]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800164a:	e029      	b.n	80016a0 <HAL_RCC_OscConfig+0x52c>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	2b05      	cmp	r3, #5
 8001652:	d115      	bne.n	8001680 <HAL_RCC_OscConfig+0x50c>
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 8001656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800165a:	4a07      	ldr	r2, [pc, #28]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 800165c:	f043 0304 	orr.w	r3, r3, #4
 8001660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001664:	4b04      	ldr	r3, [pc, #16]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 8001666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800166a:	4a03      	ldr	r2, [pc, #12]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001674:	e014      	b.n	80016a0 <HAL_RCC_OscConfig+0x52c>
 8001676:	bf00      	nop
 8001678:	40021000 	.word	0x40021000
 800167c:	40007000 	.word	0x40007000
 8001680:	4b9c      	ldr	r3, [pc, #624]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 8001682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001686:	4a9b      	ldr	r2, [pc, #620]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 8001688:	f023 0301 	bic.w	r3, r3, #1
 800168c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001690:	4b98      	ldr	r3, [pc, #608]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 8001692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001696:	4a97      	ldr	r2, [pc, #604]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 8001698:	f023 0304 	bic.w	r3, r3, #4
 800169c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d016      	beq.n	80016d6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a8:	f7ff f874 	bl	8000794 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016ae:	e00a      	b.n	80016c6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b0:	f7ff f870 	bl	8000794 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80016be:	4293      	cmp	r3, r2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e12a      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016c6:	4b8b      	ldr	r3, [pc, #556]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 80016c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0ed      	beq.n	80016b0 <HAL_RCC_OscConfig+0x53c>
 80016d4:	e015      	b.n	8001702 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d6:	f7ff f85d 	bl	8000794 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016dc:	e00a      	b.n	80016f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016de:	f7ff f859 	bl	8000794 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e113      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016f4:	4b7f      	ldr	r3, [pc, #508]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 80016f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1ed      	bne.n	80016de <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001702:	7ffb      	ldrb	r3, [r7, #31]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d105      	bne.n	8001714 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001708:	4b7a      	ldr	r3, [pc, #488]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 800170a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170c:	4a79      	ldr	r2, [pc, #484]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 800170e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001712:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 80fe 	beq.w	800191a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001722:	2b02      	cmp	r3, #2
 8001724:	f040 80d0 	bne.w	80018c8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001728:	4b72      	ldr	r3, [pc, #456]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	f003 0203 	and.w	r2, r3, #3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001738:	429a      	cmp	r2, r3
 800173a:	d130      	bne.n	800179e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	3b01      	subs	r3, #1
 8001748:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800174a:	429a      	cmp	r2, r3
 800174c:	d127      	bne.n	800179e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001758:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800175a:	429a      	cmp	r2, r3
 800175c:	d11f      	bne.n	800179e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001768:	2a07      	cmp	r2, #7
 800176a:	bf14      	ite	ne
 800176c:	2201      	movne	r2, #1
 800176e:	2200      	moveq	r2, #0
 8001770:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001772:	4293      	cmp	r3, r2
 8001774:	d113      	bne.n	800179e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001780:	085b      	lsrs	r3, r3, #1
 8001782:	3b01      	subs	r3, #1
 8001784:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001786:	429a      	cmp	r2, r3
 8001788:	d109      	bne.n	800179e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	085b      	lsrs	r3, r3, #1
 8001796:	3b01      	subs	r3, #1
 8001798:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800179a:	429a      	cmp	r2, r3
 800179c:	d06e      	beq.n	800187c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	2b0c      	cmp	r3, #12
 80017a2:	d069      	beq.n	8001878 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017a4:	4b53      	ldr	r3, [pc, #332]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d105      	bne.n	80017bc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80017b0:	4b50      	ldr	r3, [pc, #320]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e0ad      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017c0:	4b4c      	ldr	r3, [pc, #304]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a4b      	ldr	r2, [pc, #300]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 80017c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017ca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017cc:	f7fe ffe2 	bl	8000794 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d4:	f7fe ffde 	bl	8000794 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e09a      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017e6:	4b43      	ldr	r3, [pc, #268]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f0      	bne.n	80017d4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017f2:	4b40      	ldr	r3, [pc, #256]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 80017f4:	68da      	ldr	r2, [r3, #12]
 80017f6:	4b40      	ldr	r3, [pc, #256]	; (80018f8 <HAL_RCC_OscConfig+0x784>)
 80017f8:	4013      	ands	r3, r2
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001802:	3a01      	subs	r2, #1
 8001804:	0112      	lsls	r2, r2, #4
 8001806:	4311      	orrs	r1, r2
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800180c:	0212      	lsls	r2, r2, #8
 800180e:	4311      	orrs	r1, r2
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001814:	0852      	lsrs	r2, r2, #1
 8001816:	3a01      	subs	r2, #1
 8001818:	0552      	lsls	r2, r2, #21
 800181a:	4311      	orrs	r1, r2
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001820:	0852      	lsrs	r2, r2, #1
 8001822:	3a01      	subs	r2, #1
 8001824:	0652      	lsls	r2, r2, #25
 8001826:	4311      	orrs	r1, r2
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800182c:	0912      	lsrs	r2, r2, #4
 800182e:	0452      	lsls	r2, r2, #17
 8001830:	430a      	orrs	r2, r1
 8001832:	4930      	ldr	r1, [pc, #192]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 8001834:	4313      	orrs	r3, r2
 8001836:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001838:	4b2e      	ldr	r3, [pc, #184]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a2d      	ldr	r2, [pc, #180]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 800183e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001842:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001844:	4b2b      	ldr	r3, [pc, #172]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	4a2a      	ldr	r2, [pc, #168]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 800184a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800184e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001850:	f7fe ffa0 	bl	8000794 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001858:	f7fe ff9c 	bl	8000794 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e058      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800186a:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001876:	e050      	b.n	800191a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e04f      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800187c:	4b1d      	ldr	r3, [pc, #116]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d148      	bne.n	800191a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001888:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a19      	ldr	r2, [pc, #100]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 800188e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001892:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001894:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	4a16      	ldr	r2, [pc, #88]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 800189a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800189e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018a0:	f7fe ff78 	bl	8000794 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a8:	f7fe ff74 	bl	8000794 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e030      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ba:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0f0      	beq.n	80018a8 <HAL_RCC_OscConfig+0x734>
 80018c6:	e028      	b.n	800191a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	2b0c      	cmp	r3, #12
 80018cc:	d023      	beq.n	8001916 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a08      	ldr	r2, [pc, #32]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 80018d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018da:	f7fe ff5b 	bl	8000794 <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018e0:	e00c      	b.n	80018fc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e2:	f7fe ff57 	bl	8000794 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d905      	bls.n	80018fc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e013      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
 80018f4:	40021000 	.word	0x40021000
 80018f8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018fc:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_RCC_OscConfig+0x7b0>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1ec      	bne.n	80018e2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_RCC_OscConfig+0x7b0>)
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	4905      	ldr	r1, [pc, #20]	; (8001924 <HAL_RCC_OscConfig+0x7b0>)
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_RCC_OscConfig+0x7b4>)
 8001910:	4013      	ands	r3, r2
 8001912:	60cb      	str	r3, [r1, #12]
 8001914:	e001      	b.n	800191a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e000      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3720      	adds	r7, #32
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40021000 	.word	0x40021000
 8001928:	feeefffc 	.word	0xfeeefffc

0800192c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e0e7      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001940:	4b75      	ldr	r3, [pc, #468]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0307 	and.w	r3, r3, #7
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d910      	bls.n	8001970 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194e:	4b72      	ldr	r3, [pc, #456]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f023 0207 	bic.w	r2, r3, #7
 8001956:	4970      	ldr	r1, [pc, #448]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	4313      	orrs	r3, r2
 800195c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800195e:	4b6e      	ldr	r3, [pc, #440]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	d001      	beq.n	8001970 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e0cf      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d010      	beq.n	800199e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	4b66      	ldr	r3, [pc, #408]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001988:	429a      	cmp	r2, r3
 800198a:	d908      	bls.n	800199e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800198c:	4b63      	ldr	r3, [pc, #396]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	4960      	ldr	r1, [pc, #384]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 800199a:	4313      	orrs	r3, r2
 800199c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d04c      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d107      	bne.n	80019c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b2:	4b5a      	ldr	r3, [pc, #360]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d121      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e0a6      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d107      	bne.n	80019da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ca:	4b54      	ldr	r3, [pc, #336]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d115      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e09a      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d107      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019e2:	4b4e      	ldr	r3, [pc, #312]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d109      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e08e      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019f2:	4b4a      	ldr	r3, [pc, #296]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e086      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a02:	4b46      	ldr	r3, [pc, #280]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f023 0203 	bic.w	r2, r3, #3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	4943      	ldr	r1, [pc, #268]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a14:	f7fe febe 	bl	8000794 <HAL_GetTick>
 8001a18:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1a:	e00a      	b.n	8001a32 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a1c:	f7fe feba 	bl	8000794 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e06e      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a32:	4b3a      	ldr	r3, [pc, #232]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 020c 	and.w	r2, r3, #12
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d1eb      	bne.n	8001a1c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d010      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	4b31      	ldr	r3, [pc, #196]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d208      	bcs.n	8001a72 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a60:	4b2e      	ldr	r3, [pc, #184]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	492b      	ldr	r1, [pc, #172]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a72:	4b29      	ldr	r3, [pc, #164]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d210      	bcs.n	8001aa2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a80:	4b25      	ldr	r3, [pc, #148]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f023 0207 	bic.w	r2, r3, #7
 8001a88:	4923      	ldr	r1, [pc, #140]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a90:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d001      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e036      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d008      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aae:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	4918      	ldr	r1, [pc, #96]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d009      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	4910      	ldr	r1, [pc, #64]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ae0:	f000 f824 	bl	8001b2c <HAL_RCC_GetSysClockFreq>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	091b      	lsrs	r3, r3, #4
 8001aec:	f003 030f 	and.w	r3, r3, #15
 8001af0:	490b      	ldr	r1, [pc, #44]	; (8001b20 <HAL_RCC_ClockConfig+0x1f4>)
 8001af2:	5ccb      	ldrb	r3, [r1, r3]
 8001af4:	f003 031f 	and.w	r3, r3, #31
 8001af8:	fa22 f303 	lsr.w	r3, r2, r3
 8001afc:	4a09      	ldr	r2, [pc, #36]	; (8001b24 <HAL_RCC_ClockConfig+0x1f8>)
 8001afe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b00:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <HAL_RCC_ClockConfig+0x1fc>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7fe fdf5 	bl	80006f4 <HAL_InitTick>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b0e:	7afb      	ldrb	r3, [r7, #11]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40022000 	.word	0x40022000
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	08002784 	.word	0x08002784
 8001b24:	20000000 	.word	0x20000000
 8001b28:	20000004 	.word	0x20000004

08001b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b089      	sub	sp, #36	; 0x24
 8001b30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
 8001b36:	2300      	movs	r3, #0
 8001b38:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b3a:	4b3e      	ldr	r3, [pc, #248]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 030c 	and.w	r3, r3, #12
 8001b42:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b44:	4b3b      	ldr	r3, [pc, #236]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	f003 0303 	and.w	r3, r3, #3
 8001b4c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d005      	beq.n	8001b60 <HAL_RCC_GetSysClockFreq+0x34>
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	2b0c      	cmp	r3, #12
 8001b58:	d121      	bne.n	8001b9e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d11e      	bne.n	8001b9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b60:	4b34      	ldr	r3, [pc, #208]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0308 	and.w	r3, r3, #8
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d107      	bne.n	8001b7c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b6c:	4b31      	ldr	r3, [pc, #196]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b72:	0a1b      	lsrs	r3, r3, #8
 8001b74:	f003 030f 	and.w	r3, r3, #15
 8001b78:	61fb      	str	r3, [r7, #28]
 8001b7a:	e005      	b.n	8001b88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b7c:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	091b      	lsrs	r3, r3, #4
 8001b82:	f003 030f 	and.w	r3, r3, #15
 8001b86:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b88:	4a2b      	ldr	r2, [pc, #172]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b90:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10d      	bne.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b9c:	e00a      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	2b04      	cmp	r3, #4
 8001ba2:	d102      	bne.n	8001baa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ba4:	4b25      	ldr	r3, [pc, #148]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ba6:	61bb      	str	r3, [r7, #24]
 8001ba8:	e004      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	d101      	bne.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bb0:	4b23      	ldr	r3, [pc, #140]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bb2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	2b0c      	cmp	r3, #12
 8001bb8:	d134      	bne.n	8001c24 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bba:	4b1e      	ldr	r3, [pc, #120]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d003      	beq.n	8001bd2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	2b03      	cmp	r3, #3
 8001bce:	d003      	beq.n	8001bd8 <HAL_RCC_GetSysClockFreq+0xac>
 8001bd0:	e005      	b.n	8001bde <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001bd2:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x110>)
 8001bd4:	617b      	str	r3, [r7, #20]
      break;
 8001bd6:	e005      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001bd8:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bda:	617b      	str	r3, [r7, #20]
      break;
 8001bdc:	e002      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	617b      	str	r3, [r7, #20]
      break;
 8001be2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001be4:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	3301      	adds	r3, #1
 8001bf0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001bf2:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	0a1b      	lsrs	r3, r3, #8
 8001bf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	fb03 f202 	mul.w	r2, r3, r2
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c08:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	0e5b      	lsrs	r3, r3, #25
 8001c10:	f003 0303 	and.w	r3, r3, #3
 8001c14:	3301      	adds	r3, #1
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c22:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c24:	69bb      	ldr	r3, [r7, #24]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3724      	adds	r7, #36	; 0x24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40021000 	.word	0x40021000
 8001c38:	08002794 	.word	0x08002794
 8001c3c:	00f42400 	.word	0x00f42400
 8001c40:	007a1200 	.word	0x007a1200

08001c44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c50:	4b2a      	ldr	r3, [pc, #168]	; (8001cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c5c:	f7ff fa26 	bl	80010ac <HAL_PWREx_GetVoltageRange>
 8001c60:	6178      	str	r0, [r7, #20]
 8001c62:	e014      	b.n	8001c8e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c64:	4b25      	ldr	r3, [pc, #148]	; (8001cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c68:	4a24      	ldr	r2, [pc, #144]	; (8001cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c70:	4b22      	ldr	r3, [pc, #136]	; (8001cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c7c:	f7ff fa16 	bl	80010ac <HAL_PWREx_GetVoltageRange>
 8001c80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c82:	4b1e      	ldr	r3, [pc, #120]	; (8001cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c86:	4a1d      	ldr	r2, [pc, #116]	; (8001cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c8c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c94:	d10b      	bne.n	8001cae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b80      	cmp	r3, #128	; 0x80
 8001c9a:	d919      	bls.n	8001cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2ba0      	cmp	r3, #160	; 0xa0
 8001ca0:	d902      	bls.n	8001ca8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	e013      	b.n	8001cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ca8:	2301      	movs	r3, #1
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	e010      	b.n	8001cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b80      	cmp	r3, #128	; 0x80
 8001cb2:	d902      	bls.n	8001cba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	e00a      	b.n	8001cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b80      	cmp	r3, #128	; 0x80
 8001cbe:	d102      	bne.n	8001cc6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	e004      	b.n	8001cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b70      	cmp	r3, #112	; 0x70
 8001cca:	d101      	bne.n	8001cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ccc:	2301      	movs	r3, #1
 8001cce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f023 0207 	bic.w	r2, r3, #7
 8001cd8:	4909      	ldr	r1, [pc, #36]	; (8001d00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ce0:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d001      	beq.n	8001cf2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	40022000 	.word	0x40022000

08001d04 <__errno>:
 8001d04:	4b01      	ldr	r3, [pc, #4]	; (8001d0c <__errno+0x8>)
 8001d06:	6818      	ldr	r0, [r3, #0]
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	2000000c 	.word	0x2000000c

08001d10 <__libc_init_array>:
 8001d10:	b570      	push	{r4, r5, r6, lr}
 8001d12:	4d0d      	ldr	r5, [pc, #52]	; (8001d48 <__libc_init_array+0x38>)
 8001d14:	4c0d      	ldr	r4, [pc, #52]	; (8001d4c <__libc_init_array+0x3c>)
 8001d16:	1b64      	subs	r4, r4, r5
 8001d18:	10a4      	asrs	r4, r4, #2
 8001d1a:	2600      	movs	r6, #0
 8001d1c:	42a6      	cmp	r6, r4
 8001d1e:	d109      	bne.n	8001d34 <__libc_init_array+0x24>
 8001d20:	4d0b      	ldr	r5, [pc, #44]	; (8001d50 <__libc_init_array+0x40>)
 8001d22:	4c0c      	ldr	r4, [pc, #48]	; (8001d54 <__libc_init_array+0x44>)
 8001d24:	f000 fd1e 	bl	8002764 <_init>
 8001d28:	1b64      	subs	r4, r4, r5
 8001d2a:	10a4      	asrs	r4, r4, #2
 8001d2c:	2600      	movs	r6, #0
 8001d2e:	42a6      	cmp	r6, r4
 8001d30:	d105      	bne.n	8001d3e <__libc_init_array+0x2e>
 8001d32:	bd70      	pop	{r4, r5, r6, pc}
 8001d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d38:	4798      	blx	r3
 8001d3a:	3601      	adds	r6, #1
 8001d3c:	e7ee      	b.n	8001d1c <__libc_init_array+0xc>
 8001d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d42:	4798      	blx	r3
 8001d44:	3601      	adds	r6, #1
 8001d46:	e7f2      	b.n	8001d2e <__libc_init_array+0x1e>
 8001d48:	08002828 	.word	0x08002828
 8001d4c:	08002828 	.word	0x08002828
 8001d50:	08002828 	.word	0x08002828
 8001d54:	0800282c 	.word	0x0800282c

08001d58 <memset>:
 8001d58:	4402      	add	r2, r0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d100      	bne.n	8001d62 <memset+0xa>
 8001d60:	4770      	bx	lr
 8001d62:	f803 1b01 	strb.w	r1, [r3], #1
 8001d66:	e7f9      	b.n	8001d5c <memset+0x4>

08001d68 <_puts_r>:
 8001d68:	b570      	push	{r4, r5, r6, lr}
 8001d6a:	460e      	mov	r6, r1
 8001d6c:	4605      	mov	r5, r0
 8001d6e:	b118      	cbz	r0, 8001d78 <_puts_r+0x10>
 8001d70:	6983      	ldr	r3, [r0, #24]
 8001d72:	b90b      	cbnz	r3, 8001d78 <_puts_r+0x10>
 8001d74:	f000 fa48 	bl	8002208 <__sinit>
 8001d78:	69ab      	ldr	r3, [r5, #24]
 8001d7a:	68ac      	ldr	r4, [r5, #8]
 8001d7c:	b913      	cbnz	r3, 8001d84 <_puts_r+0x1c>
 8001d7e:	4628      	mov	r0, r5
 8001d80:	f000 fa42 	bl	8002208 <__sinit>
 8001d84:	4b2c      	ldr	r3, [pc, #176]	; (8001e38 <_puts_r+0xd0>)
 8001d86:	429c      	cmp	r4, r3
 8001d88:	d120      	bne.n	8001dcc <_puts_r+0x64>
 8001d8a:	686c      	ldr	r4, [r5, #4]
 8001d8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001d8e:	07db      	lsls	r3, r3, #31
 8001d90:	d405      	bmi.n	8001d9e <_puts_r+0x36>
 8001d92:	89a3      	ldrh	r3, [r4, #12]
 8001d94:	0598      	lsls	r0, r3, #22
 8001d96:	d402      	bmi.n	8001d9e <_puts_r+0x36>
 8001d98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d9a:	f000 fad3 	bl	8002344 <__retarget_lock_acquire_recursive>
 8001d9e:	89a3      	ldrh	r3, [r4, #12]
 8001da0:	0719      	lsls	r1, r3, #28
 8001da2:	d51d      	bpl.n	8001de0 <_puts_r+0x78>
 8001da4:	6923      	ldr	r3, [r4, #16]
 8001da6:	b1db      	cbz	r3, 8001de0 <_puts_r+0x78>
 8001da8:	3e01      	subs	r6, #1
 8001daa:	68a3      	ldr	r3, [r4, #8]
 8001dac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001db0:	3b01      	subs	r3, #1
 8001db2:	60a3      	str	r3, [r4, #8]
 8001db4:	bb39      	cbnz	r1, 8001e06 <_puts_r+0x9e>
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	da38      	bge.n	8001e2c <_puts_r+0xc4>
 8001dba:	4622      	mov	r2, r4
 8001dbc:	210a      	movs	r1, #10
 8001dbe:	4628      	mov	r0, r5
 8001dc0:	f000 f848 	bl	8001e54 <__swbuf_r>
 8001dc4:	3001      	adds	r0, #1
 8001dc6:	d011      	beq.n	8001dec <_puts_r+0x84>
 8001dc8:	250a      	movs	r5, #10
 8001dca:	e011      	b.n	8001df0 <_puts_r+0x88>
 8001dcc:	4b1b      	ldr	r3, [pc, #108]	; (8001e3c <_puts_r+0xd4>)
 8001dce:	429c      	cmp	r4, r3
 8001dd0:	d101      	bne.n	8001dd6 <_puts_r+0x6e>
 8001dd2:	68ac      	ldr	r4, [r5, #8]
 8001dd4:	e7da      	b.n	8001d8c <_puts_r+0x24>
 8001dd6:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <_puts_r+0xd8>)
 8001dd8:	429c      	cmp	r4, r3
 8001dda:	bf08      	it	eq
 8001ddc:	68ec      	ldreq	r4, [r5, #12]
 8001dde:	e7d5      	b.n	8001d8c <_puts_r+0x24>
 8001de0:	4621      	mov	r1, r4
 8001de2:	4628      	mov	r0, r5
 8001de4:	f000 f888 	bl	8001ef8 <__swsetup_r>
 8001de8:	2800      	cmp	r0, #0
 8001dea:	d0dd      	beq.n	8001da8 <_puts_r+0x40>
 8001dec:	f04f 35ff 	mov.w	r5, #4294967295
 8001df0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001df2:	07da      	lsls	r2, r3, #31
 8001df4:	d405      	bmi.n	8001e02 <_puts_r+0x9a>
 8001df6:	89a3      	ldrh	r3, [r4, #12]
 8001df8:	059b      	lsls	r3, r3, #22
 8001dfa:	d402      	bmi.n	8001e02 <_puts_r+0x9a>
 8001dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001dfe:	f000 faa2 	bl	8002346 <__retarget_lock_release_recursive>
 8001e02:	4628      	mov	r0, r5
 8001e04:	bd70      	pop	{r4, r5, r6, pc}
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	da04      	bge.n	8001e14 <_puts_r+0xac>
 8001e0a:	69a2      	ldr	r2, [r4, #24]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	dc06      	bgt.n	8001e1e <_puts_r+0xb6>
 8001e10:	290a      	cmp	r1, #10
 8001e12:	d004      	beq.n	8001e1e <_puts_r+0xb6>
 8001e14:	6823      	ldr	r3, [r4, #0]
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	6022      	str	r2, [r4, #0]
 8001e1a:	7019      	strb	r1, [r3, #0]
 8001e1c:	e7c5      	b.n	8001daa <_puts_r+0x42>
 8001e1e:	4622      	mov	r2, r4
 8001e20:	4628      	mov	r0, r5
 8001e22:	f000 f817 	bl	8001e54 <__swbuf_r>
 8001e26:	3001      	adds	r0, #1
 8001e28:	d1bf      	bne.n	8001daa <_puts_r+0x42>
 8001e2a:	e7df      	b.n	8001dec <_puts_r+0x84>
 8001e2c:	6823      	ldr	r3, [r4, #0]
 8001e2e:	250a      	movs	r5, #10
 8001e30:	1c5a      	adds	r2, r3, #1
 8001e32:	6022      	str	r2, [r4, #0]
 8001e34:	701d      	strb	r5, [r3, #0]
 8001e36:	e7db      	b.n	8001df0 <_puts_r+0x88>
 8001e38:	080027e8 	.word	0x080027e8
 8001e3c:	08002808 	.word	0x08002808
 8001e40:	080027c8 	.word	0x080027c8

08001e44 <puts>:
 8001e44:	4b02      	ldr	r3, [pc, #8]	; (8001e50 <puts+0xc>)
 8001e46:	4601      	mov	r1, r0
 8001e48:	6818      	ldr	r0, [r3, #0]
 8001e4a:	f7ff bf8d 	b.w	8001d68 <_puts_r>
 8001e4e:	bf00      	nop
 8001e50:	2000000c 	.word	0x2000000c

08001e54 <__swbuf_r>:
 8001e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e56:	460e      	mov	r6, r1
 8001e58:	4614      	mov	r4, r2
 8001e5a:	4605      	mov	r5, r0
 8001e5c:	b118      	cbz	r0, 8001e66 <__swbuf_r+0x12>
 8001e5e:	6983      	ldr	r3, [r0, #24]
 8001e60:	b90b      	cbnz	r3, 8001e66 <__swbuf_r+0x12>
 8001e62:	f000 f9d1 	bl	8002208 <__sinit>
 8001e66:	4b21      	ldr	r3, [pc, #132]	; (8001eec <__swbuf_r+0x98>)
 8001e68:	429c      	cmp	r4, r3
 8001e6a:	d12b      	bne.n	8001ec4 <__swbuf_r+0x70>
 8001e6c:	686c      	ldr	r4, [r5, #4]
 8001e6e:	69a3      	ldr	r3, [r4, #24]
 8001e70:	60a3      	str	r3, [r4, #8]
 8001e72:	89a3      	ldrh	r3, [r4, #12]
 8001e74:	071a      	lsls	r2, r3, #28
 8001e76:	d52f      	bpl.n	8001ed8 <__swbuf_r+0x84>
 8001e78:	6923      	ldr	r3, [r4, #16]
 8001e7a:	b36b      	cbz	r3, 8001ed8 <__swbuf_r+0x84>
 8001e7c:	6923      	ldr	r3, [r4, #16]
 8001e7e:	6820      	ldr	r0, [r4, #0]
 8001e80:	1ac0      	subs	r0, r0, r3
 8001e82:	6963      	ldr	r3, [r4, #20]
 8001e84:	b2f6      	uxtb	r6, r6
 8001e86:	4283      	cmp	r3, r0
 8001e88:	4637      	mov	r7, r6
 8001e8a:	dc04      	bgt.n	8001e96 <__swbuf_r+0x42>
 8001e8c:	4621      	mov	r1, r4
 8001e8e:	4628      	mov	r0, r5
 8001e90:	f000 f926 	bl	80020e0 <_fflush_r>
 8001e94:	bb30      	cbnz	r0, 8001ee4 <__swbuf_r+0x90>
 8001e96:	68a3      	ldr	r3, [r4, #8]
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	60a3      	str	r3, [r4, #8]
 8001e9c:	6823      	ldr	r3, [r4, #0]
 8001e9e:	1c5a      	adds	r2, r3, #1
 8001ea0:	6022      	str	r2, [r4, #0]
 8001ea2:	701e      	strb	r6, [r3, #0]
 8001ea4:	6963      	ldr	r3, [r4, #20]
 8001ea6:	3001      	adds	r0, #1
 8001ea8:	4283      	cmp	r3, r0
 8001eaa:	d004      	beq.n	8001eb6 <__swbuf_r+0x62>
 8001eac:	89a3      	ldrh	r3, [r4, #12]
 8001eae:	07db      	lsls	r3, r3, #31
 8001eb0:	d506      	bpl.n	8001ec0 <__swbuf_r+0x6c>
 8001eb2:	2e0a      	cmp	r6, #10
 8001eb4:	d104      	bne.n	8001ec0 <__swbuf_r+0x6c>
 8001eb6:	4621      	mov	r1, r4
 8001eb8:	4628      	mov	r0, r5
 8001eba:	f000 f911 	bl	80020e0 <_fflush_r>
 8001ebe:	b988      	cbnz	r0, 8001ee4 <__swbuf_r+0x90>
 8001ec0:	4638      	mov	r0, r7
 8001ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ec4:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <__swbuf_r+0x9c>)
 8001ec6:	429c      	cmp	r4, r3
 8001ec8:	d101      	bne.n	8001ece <__swbuf_r+0x7a>
 8001eca:	68ac      	ldr	r4, [r5, #8]
 8001ecc:	e7cf      	b.n	8001e6e <__swbuf_r+0x1a>
 8001ece:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <__swbuf_r+0xa0>)
 8001ed0:	429c      	cmp	r4, r3
 8001ed2:	bf08      	it	eq
 8001ed4:	68ec      	ldreq	r4, [r5, #12]
 8001ed6:	e7ca      	b.n	8001e6e <__swbuf_r+0x1a>
 8001ed8:	4621      	mov	r1, r4
 8001eda:	4628      	mov	r0, r5
 8001edc:	f000 f80c 	bl	8001ef8 <__swsetup_r>
 8001ee0:	2800      	cmp	r0, #0
 8001ee2:	d0cb      	beq.n	8001e7c <__swbuf_r+0x28>
 8001ee4:	f04f 37ff 	mov.w	r7, #4294967295
 8001ee8:	e7ea      	b.n	8001ec0 <__swbuf_r+0x6c>
 8001eea:	bf00      	nop
 8001eec:	080027e8 	.word	0x080027e8
 8001ef0:	08002808 	.word	0x08002808
 8001ef4:	080027c8 	.word	0x080027c8

08001ef8 <__swsetup_r>:
 8001ef8:	4b32      	ldr	r3, [pc, #200]	; (8001fc4 <__swsetup_r+0xcc>)
 8001efa:	b570      	push	{r4, r5, r6, lr}
 8001efc:	681d      	ldr	r5, [r3, #0]
 8001efe:	4606      	mov	r6, r0
 8001f00:	460c      	mov	r4, r1
 8001f02:	b125      	cbz	r5, 8001f0e <__swsetup_r+0x16>
 8001f04:	69ab      	ldr	r3, [r5, #24]
 8001f06:	b913      	cbnz	r3, 8001f0e <__swsetup_r+0x16>
 8001f08:	4628      	mov	r0, r5
 8001f0a:	f000 f97d 	bl	8002208 <__sinit>
 8001f0e:	4b2e      	ldr	r3, [pc, #184]	; (8001fc8 <__swsetup_r+0xd0>)
 8001f10:	429c      	cmp	r4, r3
 8001f12:	d10f      	bne.n	8001f34 <__swsetup_r+0x3c>
 8001f14:	686c      	ldr	r4, [r5, #4]
 8001f16:	89a3      	ldrh	r3, [r4, #12]
 8001f18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001f1c:	0719      	lsls	r1, r3, #28
 8001f1e:	d42c      	bmi.n	8001f7a <__swsetup_r+0x82>
 8001f20:	06dd      	lsls	r5, r3, #27
 8001f22:	d411      	bmi.n	8001f48 <__swsetup_r+0x50>
 8001f24:	2309      	movs	r3, #9
 8001f26:	6033      	str	r3, [r6, #0]
 8001f28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001f2c:	81a3      	strh	r3, [r4, #12]
 8001f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f32:	e03e      	b.n	8001fb2 <__swsetup_r+0xba>
 8001f34:	4b25      	ldr	r3, [pc, #148]	; (8001fcc <__swsetup_r+0xd4>)
 8001f36:	429c      	cmp	r4, r3
 8001f38:	d101      	bne.n	8001f3e <__swsetup_r+0x46>
 8001f3a:	68ac      	ldr	r4, [r5, #8]
 8001f3c:	e7eb      	b.n	8001f16 <__swsetup_r+0x1e>
 8001f3e:	4b24      	ldr	r3, [pc, #144]	; (8001fd0 <__swsetup_r+0xd8>)
 8001f40:	429c      	cmp	r4, r3
 8001f42:	bf08      	it	eq
 8001f44:	68ec      	ldreq	r4, [r5, #12]
 8001f46:	e7e6      	b.n	8001f16 <__swsetup_r+0x1e>
 8001f48:	0758      	lsls	r0, r3, #29
 8001f4a:	d512      	bpl.n	8001f72 <__swsetup_r+0x7a>
 8001f4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f4e:	b141      	cbz	r1, 8001f62 <__swsetup_r+0x6a>
 8001f50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f54:	4299      	cmp	r1, r3
 8001f56:	d002      	beq.n	8001f5e <__swsetup_r+0x66>
 8001f58:	4630      	mov	r0, r6
 8001f5a:	f000 fa5b 	bl	8002414 <_free_r>
 8001f5e:	2300      	movs	r3, #0
 8001f60:	6363      	str	r3, [r4, #52]	; 0x34
 8001f62:	89a3      	ldrh	r3, [r4, #12]
 8001f64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001f68:	81a3      	strh	r3, [r4, #12]
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	6063      	str	r3, [r4, #4]
 8001f6e:	6923      	ldr	r3, [r4, #16]
 8001f70:	6023      	str	r3, [r4, #0]
 8001f72:	89a3      	ldrh	r3, [r4, #12]
 8001f74:	f043 0308 	orr.w	r3, r3, #8
 8001f78:	81a3      	strh	r3, [r4, #12]
 8001f7a:	6923      	ldr	r3, [r4, #16]
 8001f7c:	b94b      	cbnz	r3, 8001f92 <__swsetup_r+0x9a>
 8001f7e:	89a3      	ldrh	r3, [r4, #12]
 8001f80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001f84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f88:	d003      	beq.n	8001f92 <__swsetup_r+0x9a>
 8001f8a:	4621      	mov	r1, r4
 8001f8c:	4630      	mov	r0, r6
 8001f8e:	f000 fa01 	bl	8002394 <__smakebuf_r>
 8001f92:	89a0      	ldrh	r0, [r4, #12]
 8001f94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001f98:	f010 0301 	ands.w	r3, r0, #1
 8001f9c:	d00a      	beq.n	8001fb4 <__swsetup_r+0xbc>
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60a3      	str	r3, [r4, #8]
 8001fa2:	6963      	ldr	r3, [r4, #20]
 8001fa4:	425b      	negs	r3, r3
 8001fa6:	61a3      	str	r3, [r4, #24]
 8001fa8:	6923      	ldr	r3, [r4, #16]
 8001faa:	b943      	cbnz	r3, 8001fbe <__swsetup_r+0xc6>
 8001fac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001fb0:	d1ba      	bne.n	8001f28 <__swsetup_r+0x30>
 8001fb2:	bd70      	pop	{r4, r5, r6, pc}
 8001fb4:	0781      	lsls	r1, r0, #30
 8001fb6:	bf58      	it	pl
 8001fb8:	6963      	ldrpl	r3, [r4, #20]
 8001fba:	60a3      	str	r3, [r4, #8]
 8001fbc:	e7f4      	b.n	8001fa8 <__swsetup_r+0xb0>
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	e7f7      	b.n	8001fb2 <__swsetup_r+0xba>
 8001fc2:	bf00      	nop
 8001fc4:	2000000c 	.word	0x2000000c
 8001fc8:	080027e8 	.word	0x080027e8
 8001fcc:	08002808 	.word	0x08002808
 8001fd0:	080027c8 	.word	0x080027c8

08001fd4 <__sflush_r>:
 8001fd4:	898a      	ldrh	r2, [r1, #12]
 8001fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fda:	4605      	mov	r5, r0
 8001fdc:	0710      	lsls	r0, r2, #28
 8001fde:	460c      	mov	r4, r1
 8001fe0:	d458      	bmi.n	8002094 <__sflush_r+0xc0>
 8001fe2:	684b      	ldr	r3, [r1, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	dc05      	bgt.n	8001ff4 <__sflush_r+0x20>
 8001fe8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	dc02      	bgt.n	8001ff4 <__sflush_r+0x20>
 8001fee:	2000      	movs	r0, #0
 8001ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ff4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001ff6:	2e00      	cmp	r6, #0
 8001ff8:	d0f9      	beq.n	8001fee <__sflush_r+0x1a>
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002000:	682f      	ldr	r7, [r5, #0]
 8002002:	602b      	str	r3, [r5, #0]
 8002004:	d032      	beq.n	800206c <__sflush_r+0x98>
 8002006:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002008:	89a3      	ldrh	r3, [r4, #12]
 800200a:	075a      	lsls	r2, r3, #29
 800200c:	d505      	bpl.n	800201a <__sflush_r+0x46>
 800200e:	6863      	ldr	r3, [r4, #4]
 8002010:	1ac0      	subs	r0, r0, r3
 8002012:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002014:	b10b      	cbz	r3, 800201a <__sflush_r+0x46>
 8002016:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002018:	1ac0      	subs	r0, r0, r3
 800201a:	2300      	movs	r3, #0
 800201c:	4602      	mov	r2, r0
 800201e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002020:	6a21      	ldr	r1, [r4, #32]
 8002022:	4628      	mov	r0, r5
 8002024:	47b0      	blx	r6
 8002026:	1c43      	adds	r3, r0, #1
 8002028:	89a3      	ldrh	r3, [r4, #12]
 800202a:	d106      	bne.n	800203a <__sflush_r+0x66>
 800202c:	6829      	ldr	r1, [r5, #0]
 800202e:	291d      	cmp	r1, #29
 8002030:	d82c      	bhi.n	800208c <__sflush_r+0xb8>
 8002032:	4a2a      	ldr	r2, [pc, #168]	; (80020dc <__sflush_r+0x108>)
 8002034:	40ca      	lsrs	r2, r1
 8002036:	07d6      	lsls	r6, r2, #31
 8002038:	d528      	bpl.n	800208c <__sflush_r+0xb8>
 800203a:	2200      	movs	r2, #0
 800203c:	6062      	str	r2, [r4, #4]
 800203e:	04d9      	lsls	r1, r3, #19
 8002040:	6922      	ldr	r2, [r4, #16]
 8002042:	6022      	str	r2, [r4, #0]
 8002044:	d504      	bpl.n	8002050 <__sflush_r+0x7c>
 8002046:	1c42      	adds	r2, r0, #1
 8002048:	d101      	bne.n	800204e <__sflush_r+0x7a>
 800204a:	682b      	ldr	r3, [r5, #0]
 800204c:	b903      	cbnz	r3, 8002050 <__sflush_r+0x7c>
 800204e:	6560      	str	r0, [r4, #84]	; 0x54
 8002050:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002052:	602f      	str	r7, [r5, #0]
 8002054:	2900      	cmp	r1, #0
 8002056:	d0ca      	beq.n	8001fee <__sflush_r+0x1a>
 8002058:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800205c:	4299      	cmp	r1, r3
 800205e:	d002      	beq.n	8002066 <__sflush_r+0x92>
 8002060:	4628      	mov	r0, r5
 8002062:	f000 f9d7 	bl	8002414 <_free_r>
 8002066:	2000      	movs	r0, #0
 8002068:	6360      	str	r0, [r4, #52]	; 0x34
 800206a:	e7c1      	b.n	8001ff0 <__sflush_r+0x1c>
 800206c:	6a21      	ldr	r1, [r4, #32]
 800206e:	2301      	movs	r3, #1
 8002070:	4628      	mov	r0, r5
 8002072:	47b0      	blx	r6
 8002074:	1c41      	adds	r1, r0, #1
 8002076:	d1c7      	bne.n	8002008 <__sflush_r+0x34>
 8002078:	682b      	ldr	r3, [r5, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0c4      	beq.n	8002008 <__sflush_r+0x34>
 800207e:	2b1d      	cmp	r3, #29
 8002080:	d001      	beq.n	8002086 <__sflush_r+0xb2>
 8002082:	2b16      	cmp	r3, #22
 8002084:	d101      	bne.n	800208a <__sflush_r+0xb6>
 8002086:	602f      	str	r7, [r5, #0]
 8002088:	e7b1      	b.n	8001fee <__sflush_r+0x1a>
 800208a:	89a3      	ldrh	r3, [r4, #12]
 800208c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002090:	81a3      	strh	r3, [r4, #12]
 8002092:	e7ad      	b.n	8001ff0 <__sflush_r+0x1c>
 8002094:	690f      	ldr	r7, [r1, #16]
 8002096:	2f00      	cmp	r7, #0
 8002098:	d0a9      	beq.n	8001fee <__sflush_r+0x1a>
 800209a:	0793      	lsls	r3, r2, #30
 800209c:	680e      	ldr	r6, [r1, #0]
 800209e:	bf08      	it	eq
 80020a0:	694b      	ldreq	r3, [r1, #20]
 80020a2:	600f      	str	r7, [r1, #0]
 80020a4:	bf18      	it	ne
 80020a6:	2300      	movne	r3, #0
 80020a8:	eba6 0807 	sub.w	r8, r6, r7
 80020ac:	608b      	str	r3, [r1, #8]
 80020ae:	f1b8 0f00 	cmp.w	r8, #0
 80020b2:	dd9c      	ble.n	8001fee <__sflush_r+0x1a>
 80020b4:	6a21      	ldr	r1, [r4, #32]
 80020b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80020b8:	4643      	mov	r3, r8
 80020ba:	463a      	mov	r2, r7
 80020bc:	4628      	mov	r0, r5
 80020be:	47b0      	blx	r6
 80020c0:	2800      	cmp	r0, #0
 80020c2:	dc06      	bgt.n	80020d2 <__sflush_r+0xfe>
 80020c4:	89a3      	ldrh	r3, [r4, #12]
 80020c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020ca:	81a3      	strh	r3, [r4, #12]
 80020cc:	f04f 30ff 	mov.w	r0, #4294967295
 80020d0:	e78e      	b.n	8001ff0 <__sflush_r+0x1c>
 80020d2:	4407      	add	r7, r0
 80020d4:	eba8 0800 	sub.w	r8, r8, r0
 80020d8:	e7e9      	b.n	80020ae <__sflush_r+0xda>
 80020da:	bf00      	nop
 80020dc:	20400001 	.word	0x20400001

080020e0 <_fflush_r>:
 80020e0:	b538      	push	{r3, r4, r5, lr}
 80020e2:	690b      	ldr	r3, [r1, #16]
 80020e4:	4605      	mov	r5, r0
 80020e6:	460c      	mov	r4, r1
 80020e8:	b913      	cbnz	r3, 80020f0 <_fflush_r+0x10>
 80020ea:	2500      	movs	r5, #0
 80020ec:	4628      	mov	r0, r5
 80020ee:	bd38      	pop	{r3, r4, r5, pc}
 80020f0:	b118      	cbz	r0, 80020fa <_fflush_r+0x1a>
 80020f2:	6983      	ldr	r3, [r0, #24]
 80020f4:	b90b      	cbnz	r3, 80020fa <_fflush_r+0x1a>
 80020f6:	f000 f887 	bl	8002208 <__sinit>
 80020fa:	4b14      	ldr	r3, [pc, #80]	; (800214c <_fflush_r+0x6c>)
 80020fc:	429c      	cmp	r4, r3
 80020fe:	d11b      	bne.n	8002138 <_fflush_r+0x58>
 8002100:	686c      	ldr	r4, [r5, #4]
 8002102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0ef      	beq.n	80020ea <_fflush_r+0xa>
 800210a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800210c:	07d0      	lsls	r0, r2, #31
 800210e:	d404      	bmi.n	800211a <_fflush_r+0x3a>
 8002110:	0599      	lsls	r1, r3, #22
 8002112:	d402      	bmi.n	800211a <_fflush_r+0x3a>
 8002114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002116:	f000 f915 	bl	8002344 <__retarget_lock_acquire_recursive>
 800211a:	4628      	mov	r0, r5
 800211c:	4621      	mov	r1, r4
 800211e:	f7ff ff59 	bl	8001fd4 <__sflush_r>
 8002122:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002124:	07da      	lsls	r2, r3, #31
 8002126:	4605      	mov	r5, r0
 8002128:	d4e0      	bmi.n	80020ec <_fflush_r+0xc>
 800212a:	89a3      	ldrh	r3, [r4, #12]
 800212c:	059b      	lsls	r3, r3, #22
 800212e:	d4dd      	bmi.n	80020ec <_fflush_r+0xc>
 8002130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002132:	f000 f908 	bl	8002346 <__retarget_lock_release_recursive>
 8002136:	e7d9      	b.n	80020ec <_fflush_r+0xc>
 8002138:	4b05      	ldr	r3, [pc, #20]	; (8002150 <_fflush_r+0x70>)
 800213a:	429c      	cmp	r4, r3
 800213c:	d101      	bne.n	8002142 <_fflush_r+0x62>
 800213e:	68ac      	ldr	r4, [r5, #8]
 8002140:	e7df      	b.n	8002102 <_fflush_r+0x22>
 8002142:	4b04      	ldr	r3, [pc, #16]	; (8002154 <_fflush_r+0x74>)
 8002144:	429c      	cmp	r4, r3
 8002146:	bf08      	it	eq
 8002148:	68ec      	ldreq	r4, [r5, #12]
 800214a:	e7da      	b.n	8002102 <_fflush_r+0x22>
 800214c:	080027e8 	.word	0x080027e8
 8002150:	08002808 	.word	0x08002808
 8002154:	080027c8 	.word	0x080027c8

08002158 <std>:
 8002158:	2300      	movs	r3, #0
 800215a:	b510      	push	{r4, lr}
 800215c:	4604      	mov	r4, r0
 800215e:	e9c0 3300 	strd	r3, r3, [r0]
 8002162:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002166:	6083      	str	r3, [r0, #8]
 8002168:	8181      	strh	r1, [r0, #12]
 800216a:	6643      	str	r3, [r0, #100]	; 0x64
 800216c:	81c2      	strh	r2, [r0, #14]
 800216e:	6183      	str	r3, [r0, #24]
 8002170:	4619      	mov	r1, r3
 8002172:	2208      	movs	r2, #8
 8002174:	305c      	adds	r0, #92	; 0x5c
 8002176:	f7ff fdef 	bl	8001d58 <memset>
 800217a:	4b05      	ldr	r3, [pc, #20]	; (8002190 <std+0x38>)
 800217c:	6263      	str	r3, [r4, #36]	; 0x24
 800217e:	4b05      	ldr	r3, [pc, #20]	; (8002194 <std+0x3c>)
 8002180:	62a3      	str	r3, [r4, #40]	; 0x28
 8002182:	4b05      	ldr	r3, [pc, #20]	; (8002198 <std+0x40>)
 8002184:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002186:	4b05      	ldr	r3, [pc, #20]	; (800219c <std+0x44>)
 8002188:	6224      	str	r4, [r4, #32]
 800218a:	6323      	str	r3, [r4, #48]	; 0x30
 800218c:	bd10      	pop	{r4, pc}
 800218e:	bf00      	nop
 8002190:	080025f5 	.word	0x080025f5
 8002194:	08002617 	.word	0x08002617
 8002198:	0800264f 	.word	0x0800264f
 800219c:	08002673 	.word	0x08002673

080021a0 <_cleanup_r>:
 80021a0:	4901      	ldr	r1, [pc, #4]	; (80021a8 <_cleanup_r+0x8>)
 80021a2:	f000 b8af 	b.w	8002304 <_fwalk_reent>
 80021a6:	bf00      	nop
 80021a8:	080020e1 	.word	0x080020e1

080021ac <__sfmoreglue>:
 80021ac:	b570      	push	{r4, r5, r6, lr}
 80021ae:	2268      	movs	r2, #104	; 0x68
 80021b0:	1e4d      	subs	r5, r1, #1
 80021b2:	4355      	muls	r5, r2
 80021b4:	460e      	mov	r6, r1
 80021b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80021ba:	f000 f997 	bl	80024ec <_malloc_r>
 80021be:	4604      	mov	r4, r0
 80021c0:	b140      	cbz	r0, 80021d4 <__sfmoreglue+0x28>
 80021c2:	2100      	movs	r1, #0
 80021c4:	e9c0 1600 	strd	r1, r6, [r0]
 80021c8:	300c      	adds	r0, #12
 80021ca:	60a0      	str	r0, [r4, #8]
 80021cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80021d0:	f7ff fdc2 	bl	8001d58 <memset>
 80021d4:	4620      	mov	r0, r4
 80021d6:	bd70      	pop	{r4, r5, r6, pc}

080021d8 <__sfp_lock_acquire>:
 80021d8:	4801      	ldr	r0, [pc, #4]	; (80021e0 <__sfp_lock_acquire+0x8>)
 80021da:	f000 b8b3 	b.w	8002344 <__retarget_lock_acquire_recursive>
 80021de:	bf00      	nop
 80021e0:	200000bd 	.word	0x200000bd

080021e4 <__sfp_lock_release>:
 80021e4:	4801      	ldr	r0, [pc, #4]	; (80021ec <__sfp_lock_release+0x8>)
 80021e6:	f000 b8ae 	b.w	8002346 <__retarget_lock_release_recursive>
 80021ea:	bf00      	nop
 80021ec:	200000bd 	.word	0x200000bd

080021f0 <__sinit_lock_acquire>:
 80021f0:	4801      	ldr	r0, [pc, #4]	; (80021f8 <__sinit_lock_acquire+0x8>)
 80021f2:	f000 b8a7 	b.w	8002344 <__retarget_lock_acquire_recursive>
 80021f6:	bf00      	nop
 80021f8:	200000be 	.word	0x200000be

080021fc <__sinit_lock_release>:
 80021fc:	4801      	ldr	r0, [pc, #4]	; (8002204 <__sinit_lock_release+0x8>)
 80021fe:	f000 b8a2 	b.w	8002346 <__retarget_lock_release_recursive>
 8002202:	bf00      	nop
 8002204:	200000be 	.word	0x200000be

08002208 <__sinit>:
 8002208:	b510      	push	{r4, lr}
 800220a:	4604      	mov	r4, r0
 800220c:	f7ff fff0 	bl	80021f0 <__sinit_lock_acquire>
 8002210:	69a3      	ldr	r3, [r4, #24]
 8002212:	b11b      	cbz	r3, 800221c <__sinit+0x14>
 8002214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002218:	f7ff bff0 	b.w	80021fc <__sinit_lock_release>
 800221c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002220:	6523      	str	r3, [r4, #80]	; 0x50
 8002222:	4b13      	ldr	r3, [pc, #76]	; (8002270 <__sinit+0x68>)
 8002224:	4a13      	ldr	r2, [pc, #76]	; (8002274 <__sinit+0x6c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	62a2      	str	r2, [r4, #40]	; 0x28
 800222a:	42a3      	cmp	r3, r4
 800222c:	bf04      	itt	eq
 800222e:	2301      	moveq	r3, #1
 8002230:	61a3      	streq	r3, [r4, #24]
 8002232:	4620      	mov	r0, r4
 8002234:	f000 f820 	bl	8002278 <__sfp>
 8002238:	6060      	str	r0, [r4, #4]
 800223a:	4620      	mov	r0, r4
 800223c:	f000 f81c 	bl	8002278 <__sfp>
 8002240:	60a0      	str	r0, [r4, #8]
 8002242:	4620      	mov	r0, r4
 8002244:	f000 f818 	bl	8002278 <__sfp>
 8002248:	2200      	movs	r2, #0
 800224a:	60e0      	str	r0, [r4, #12]
 800224c:	2104      	movs	r1, #4
 800224e:	6860      	ldr	r0, [r4, #4]
 8002250:	f7ff ff82 	bl	8002158 <std>
 8002254:	68a0      	ldr	r0, [r4, #8]
 8002256:	2201      	movs	r2, #1
 8002258:	2109      	movs	r1, #9
 800225a:	f7ff ff7d 	bl	8002158 <std>
 800225e:	68e0      	ldr	r0, [r4, #12]
 8002260:	2202      	movs	r2, #2
 8002262:	2112      	movs	r1, #18
 8002264:	f7ff ff78 	bl	8002158 <std>
 8002268:	2301      	movs	r3, #1
 800226a:	61a3      	str	r3, [r4, #24]
 800226c:	e7d2      	b.n	8002214 <__sinit+0xc>
 800226e:	bf00      	nop
 8002270:	080027c4 	.word	0x080027c4
 8002274:	080021a1 	.word	0x080021a1

08002278 <__sfp>:
 8002278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800227a:	4607      	mov	r7, r0
 800227c:	f7ff ffac 	bl	80021d8 <__sfp_lock_acquire>
 8002280:	4b1e      	ldr	r3, [pc, #120]	; (80022fc <__sfp+0x84>)
 8002282:	681e      	ldr	r6, [r3, #0]
 8002284:	69b3      	ldr	r3, [r6, #24]
 8002286:	b913      	cbnz	r3, 800228e <__sfp+0x16>
 8002288:	4630      	mov	r0, r6
 800228a:	f7ff ffbd 	bl	8002208 <__sinit>
 800228e:	3648      	adds	r6, #72	; 0x48
 8002290:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002294:	3b01      	subs	r3, #1
 8002296:	d503      	bpl.n	80022a0 <__sfp+0x28>
 8002298:	6833      	ldr	r3, [r6, #0]
 800229a:	b30b      	cbz	r3, 80022e0 <__sfp+0x68>
 800229c:	6836      	ldr	r6, [r6, #0]
 800229e:	e7f7      	b.n	8002290 <__sfp+0x18>
 80022a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80022a4:	b9d5      	cbnz	r5, 80022dc <__sfp+0x64>
 80022a6:	4b16      	ldr	r3, [pc, #88]	; (8002300 <__sfp+0x88>)
 80022a8:	60e3      	str	r3, [r4, #12]
 80022aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80022ae:	6665      	str	r5, [r4, #100]	; 0x64
 80022b0:	f000 f847 	bl	8002342 <__retarget_lock_init_recursive>
 80022b4:	f7ff ff96 	bl	80021e4 <__sfp_lock_release>
 80022b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80022bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80022c0:	6025      	str	r5, [r4, #0]
 80022c2:	61a5      	str	r5, [r4, #24]
 80022c4:	2208      	movs	r2, #8
 80022c6:	4629      	mov	r1, r5
 80022c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80022cc:	f7ff fd44 	bl	8001d58 <memset>
 80022d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80022d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80022d8:	4620      	mov	r0, r4
 80022da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022dc:	3468      	adds	r4, #104	; 0x68
 80022de:	e7d9      	b.n	8002294 <__sfp+0x1c>
 80022e0:	2104      	movs	r1, #4
 80022e2:	4638      	mov	r0, r7
 80022e4:	f7ff ff62 	bl	80021ac <__sfmoreglue>
 80022e8:	4604      	mov	r4, r0
 80022ea:	6030      	str	r0, [r6, #0]
 80022ec:	2800      	cmp	r0, #0
 80022ee:	d1d5      	bne.n	800229c <__sfp+0x24>
 80022f0:	f7ff ff78 	bl	80021e4 <__sfp_lock_release>
 80022f4:	230c      	movs	r3, #12
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	e7ee      	b.n	80022d8 <__sfp+0x60>
 80022fa:	bf00      	nop
 80022fc:	080027c4 	.word	0x080027c4
 8002300:	ffff0001 	.word	0xffff0001

08002304 <_fwalk_reent>:
 8002304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002308:	4606      	mov	r6, r0
 800230a:	4688      	mov	r8, r1
 800230c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002310:	2700      	movs	r7, #0
 8002312:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002316:	f1b9 0901 	subs.w	r9, r9, #1
 800231a:	d505      	bpl.n	8002328 <_fwalk_reent+0x24>
 800231c:	6824      	ldr	r4, [r4, #0]
 800231e:	2c00      	cmp	r4, #0
 8002320:	d1f7      	bne.n	8002312 <_fwalk_reent+0xe>
 8002322:	4638      	mov	r0, r7
 8002324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002328:	89ab      	ldrh	r3, [r5, #12]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d907      	bls.n	800233e <_fwalk_reent+0x3a>
 800232e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002332:	3301      	adds	r3, #1
 8002334:	d003      	beq.n	800233e <_fwalk_reent+0x3a>
 8002336:	4629      	mov	r1, r5
 8002338:	4630      	mov	r0, r6
 800233a:	47c0      	blx	r8
 800233c:	4307      	orrs	r7, r0
 800233e:	3568      	adds	r5, #104	; 0x68
 8002340:	e7e9      	b.n	8002316 <_fwalk_reent+0x12>

08002342 <__retarget_lock_init_recursive>:
 8002342:	4770      	bx	lr

08002344 <__retarget_lock_acquire_recursive>:
 8002344:	4770      	bx	lr

08002346 <__retarget_lock_release_recursive>:
 8002346:	4770      	bx	lr

08002348 <__swhatbuf_r>:
 8002348:	b570      	push	{r4, r5, r6, lr}
 800234a:	460e      	mov	r6, r1
 800234c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002350:	2900      	cmp	r1, #0
 8002352:	b096      	sub	sp, #88	; 0x58
 8002354:	4614      	mov	r4, r2
 8002356:	461d      	mov	r5, r3
 8002358:	da08      	bge.n	800236c <__swhatbuf_r+0x24>
 800235a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	602a      	str	r2, [r5, #0]
 8002362:	061a      	lsls	r2, r3, #24
 8002364:	d410      	bmi.n	8002388 <__swhatbuf_r+0x40>
 8002366:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800236a:	e00e      	b.n	800238a <__swhatbuf_r+0x42>
 800236c:	466a      	mov	r2, sp
 800236e:	f000 f9a7 	bl	80026c0 <_fstat_r>
 8002372:	2800      	cmp	r0, #0
 8002374:	dbf1      	blt.n	800235a <__swhatbuf_r+0x12>
 8002376:	9a01      	ldr	r2, [sp, #4]
 8002378:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800237c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002380:	425a      	negs	r2, r3
 8002382:	415a      	adcs	r2, r3
 8002384:	602a      	str	r2, [r5, #0]
 8002386:	e7ee      	b.n	8002366 <__swhatbuf_r+0x1e>
 8002388:	2340      	movs	r3, #64	; 0x40
 800238a:	2000      	movs	r0, #0
 800238c:	6023      	str	r3, [r4, #0]
 800238e:	b016      	add	sp, #88	; 0x58
 8002390:	bd70      	pop	{r4, r5, r6, pc}
	...

08002394 <__smakebuf_r>:
 8002394:	898b      	ldrh	r3, [r1, #12]
 8002396:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002398:	079d      	lsls	r5, r3, #30
 800239a:	4606      	mov	r6, r0
 800239c:	460c      	mov	r4, r1
 800239e:	d507      	bpl.n	80023b0 <__smakebuf_r+0x1c>
 80023a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80023a4:	6023      	str	r3, [r4, #0]
 80023a6:	6123      	str	r3, [r4, #16]
 80023a8:	2301      	movs	r3, #1
 80023aa:	6163      	str	r3, [r4, #20]
 80023ac:	b002      	add	sp, #8
 80023ae:	bd70      	pop	{r4, r5, r6, pc}
 80023b0:	ab01      	add	r3, sp, #4
 80023b2:	466a      	mov	r2, sp
 80023b4:	f7ff ffc8 	bl	8002348 <__swhatbuf_r>
 80023b8:	9900      	ldr	r1, [sp, #0]
 80023ba:	4605      	mov	r5, r0
 80023bc:	4630      	mov	r0, r6
 80023be:	f000 f895 	bl	80024ec <_malloc_r>
 80023c2:	b948      	cbnz	r0, 80023d8 <__smakebuf_r+0x44>
 80023c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023c8:	059a      	lsls	r2, r3, #22
 80023ca:	d4ef      	bmi.n	80023ac <__smakebuf_r+0x18>
 80023cc:	f023 0303 	bic.w	r3, r3, #3
 80023d0:	f043 0302 	orr.w	r3, r3, #2
 80023d4:	81a3      	strh	r3, [r4, #12]
 80023d6:	e7e3      	b.n	80023a0 <__smakebuf_r+0xc>
 80023d8:	4b0d      	ldr	r3, [pc, #52]	; (8002410 <__smakebuf_r+0x7c>)
 80023da:	62b3      	str	r3, [r6, #40]	; 0x28
 80023dc:	89a3      	ldrh	r3, [r4, #12]
 80023de:	6020      	str	r0, [r4, #0]
 80023e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023e4:	81a3      	strh	r3, [r4, #12]
 80023e6:	9b00      	ldr	r3, [sp, #0]
 80023e8:	6163      	str	r3, [r4, #20]
 80023ea:	9b01      	ldr	r3, [sp, #4]
 80023ec:	6120      	str	r0, [r4, #16]
 80023ee:	b15b      	cbz	r3, 8002408 <__smakebuf_r+0x74>
 80023f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80023f4:	4630      	mov	r0, r6
 80023f6:	f000 f975 	bl	80026e4 <_isatty_r>
 80023fa:	b128      	cbz	r0, 8002408 <__smakebuf_r+0x74>
 80023fc:	89a3      	ldrh	r3, [r4, #12]
 80023fe:	f023 0303 	bic.w	r3, r3, #3
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	81a3      	strh	r3, [r4, #12]
 8002408:	89a0      	ldrh	r0, [r4, #12]
 800240a:	4305      	orrs	r5, r0
 800240c:	81a5      	strh	r5, [r4, #12]
 800240e:	e7cd      	b.n	80023ac <__smakebuf_r+0x18>
 8002410:	080021a1 	.word	0x080021a1

08002414 <_free_r>:
 8002414:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002416:	2900      	cmp	r1, #0
 8002418:	d044      	beq.n	80024a4 <_free_r+0x90>
 800241a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800241e:	9001      	str	r0, [sp, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	f1a1 0404 	sub.w	r4, r1, #4
 8002426:	bfb8      	it	lt
 8002428:	18e4      	addlt	r4, r4, r3
 800242a:	f000 f97d 	bl	8002728 <__malloc_lock>
 800242e:	4a1e      	ldr	r2, [pc, #120]	; (80024a8 <_free_r+0x94>)
 8002430:	9801      	ldr	r0, [sp, #4]
 8002432:	6813      	ldr	r3, [r2, #0]
 8002434:	b933      	cbnz	r3, 8002444 <_free_r+0x30>
 8002436:	6063      	str	r3, [r4, #4]
 8002438:	6014      	str	r4, [r2, #0]
 800243a:	b003      	add	sp, #12
 800243c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002440:	f000 b978 	b.w	8002734 <__malloc_unlock>
 8002444:	42a3      	cmp	r3, r4
 8002446:	d908      	bls.n	800245a <_free_r+0x46>
 8002448:	6825      	ldr	r5, [r4, #0]
 800244a:	1961      	adds	r1, r4, r5
 800244c:	428b      	cmp	r3, r1
 800244e:	bf01      	itttt	eq
 8002450:	6819      	ldreq	r1, [r3, #0]
 8002452:	685b      	ldreq	r3, [r3, #4]
 8002454:	1949      	addeq	r1, r1, r5
 8002456:	6021      	streq	r1, [r4, #0]
 8002458:	e7ed      	b.n	8002436 <_free_r+0x22>
 800245a:	461a      	mov	r2, r3
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	b10b      	cbz	r3, 8002464 <_free_r+0x50>
 8002460:	42a3      	cmp	r3, r4
 8002462:	d9fa      	bls.n	800245a <_free_r+0x46>
 8002464:	6811      	ldr	r1, [r2, #0]
 8002466:	1855      	adds	r5, r2, r1
 8002468:	42a5      	cmp	r5, r4
 800246a:	d10b      	bne.n	8002484 <_free_r+0x70>
 800246c:	6824      	ldr	r4, [r4, #0]
 800246e:	4421      	add	r1, r4
 8002470:	1854      	adds	r4, r2, r1
 8002472:	42a3      	cmp	r3, r4
 8002474:	6011      	str	r1, [r2, #0]
 8002476:	d1e0      	bne.n	800243a <_free_r+0x26>
 8002478:	681c      	ldr	r4, [r3, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	6053      	str	r3, [r2, #4]
 800247e:	4421      	add	r1, r4
 8002480:	6011      	str	r1, [r2, #0]
 8002482:	e7da      	b.n	800243a <_free_r+0x26>
 8002484:	d902      	bls.n	800248c <_free_r+0x78>
 8002486:	230c      	movs	r3, #12
 8002488:	6003      	str	r3, [r0, #0]
 800248a:	e7d6      	b.n	800243a <_free_r+0x26>
 800248c:	6825      	ldr	r5, [r4, #0]
 800248e:	1961      	adds	r1, r4, r5
 8002490:	428b      	cmp	r3, r1
 8002492:	bf04      	itt	eq
 8002494:	6819      	ldreq	r1, [r3, #0]
 8002496:	685b      	ldreq	r3, [r3, #4]
 8002498:	6063      	str	r3, [r4, #4]
 800249a:	bf04      	itt	eq
 800249c:	1949      	addeq	r1, r1, r5
 800249e:	6021      	streq	r1, [r4, #0]
 80024a0:	6054      	str	r4, [r2, #4]
 80024a2:	e7ca      	b.n	800243a <_free_r+0x26>
 80024a4:	b003      	add	sp, #12
 80024a6:	bd30      	pop	{r4, r5, pc}
 80024a8:	200000c0 	.word	0x200000c0

080024ac <sbrk_aligned>:
 80024ac:	b570      	push	{r4, r5, r6, lr}
 80024ae:	4e0e      	ldr	r6, [pc, #56]	; (80024e8 <sbrk_aligned+0x3c>)
 80024b0:	460c      	mov	r4, r1
 80024b2:	6831      	ldr	r1, [r6, #0]
 80024b4:	4605      	mov	r5, r0
 80024b6:	b911      	cbnz	r1, 80024be <sbrk_aligned+0x12>
 80024b8:	f000 f88c 	bl	80025d4 <_sbrk_r>
 80024bc:	6030      	str	r0, [r6, #0]
 80024be:	4621      	mov	r1, r4
 80024c0:	4628      	mov	r0, r5
 80024c2:	f000 f887 	bl	80025d4 <_sbrk_r>
 80024c6:	1c43      	adds	r3, r0, #1
 80024c8:	d00a      	beq.n	80024e0 <sbrk_aligned+0x34>
 80024ca:	1cc4      	adds	r4, r0, #3
 80024cc:	f024 0403 	bic.w	r4, r4, #3
 80024d0:	42a0      	cmp	r0, r4
 80024d2:	d007      	beq.n	80024e4 <sbrk_aligned+0x38>
 80024d4:	1a21      	subs	r1, r4, r0
 80024d6:	4628      	mov	r0, r5
 80024d8:	f000 f87c 	bl	80025d4 <_sbrk_r>
 80024dc:	3001      	adds	r0, #1
 80024de:	d101      	bne.n	80024e4 <sbrk_aligned+0x38>
 80024e0:	f04f 34ff 	mov.w	r4, #4294967295
 80024e4:	4620      	mov	r0, r4
 80024e6:	bd70      	pop	{r4, r5, r6, pc}
 80024e8:	200000c4 	.word	0x200000c4

080024ec <_malloc_r>:
 80024ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024f0:	1ccd      	adds	r5, r1, #3
 80024f2:	f025 0503 	bic.w	r5, r5, #3
 80024f6:	3508      	adds	r5, #8
 80024f8:	2d0c      	cmp	r5, #12
 80024fa:	bf38      	it	cc
 80024fc:	250c      	movcc	r5, #12
 80024fe:	2d00      	cmp	r5, #0
 8002500:	4607      	mov	r7, r0
 8002502:	db01      	blt.n	8002508 <_malloc_r+0x1c>
 8002504:	42a9      	cmp	r1, r5
 8002506:	d905      	bls.n	8002514 <_malloc_r+0x28>
 8002508:	230c      	movs	r3, #12
 800250a:	603b      	str	r3, [r7, #0]
 800250c:	2600      	movs	r6, #0
 800250e:	4630      	mov	r0, r6
 8002510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002514:	4e2e      	ldr	r6, [pc, #184]	; (80025d0 <_malloc_r+0xe4>)
 8002516:	f000 f907 	bl	8002728 <__malloc_lock>
 800251a:	6833      	ldr	r3, [r6, #0]
 800251c:	461c      	mov	r4, r3
 800251e:	bb34      	cbnz	r4, 800256e <_malloc_r+0x82>
 8002520:	4629      	mov	r1, r5
 8002522:	4638      	mov	r0, r7
 8002524:	f7ff ffc2 	bl	80024ac <sbrk_aligned>
 8002528:	1c43      	adds	r3, r0, #1
 800252a:	4604      	mov	r4, r0
 800252c:	d14d      	bne.n	80025ca <_malloc_r+0xde>
 800252e:	6834      	ldr	r4, [r6, #0]
 8002530:	4626      	mov	r6, r4
 8002532:	2e00      	cmp	r6, #0
 8002534:	d140      	bne.n	80025b8 <_malloc_r+0xcc>
 8002536:	6823      	ldr	r3, [r4, #0]
 8002538:	4631      	mov	r1, r6
 800253a:	4638      	mov	r0, r7
 800253c:	eb04 0803 	add.w	r8, r4, r3
 8002540:	f000 f848 	bl	80025d4 <_sbrk_r>
 8002544:	4580      	cmp	r8, r0
 8002546:	d13a      	bne.n	80025be <_malloc_r+0xd2>
 8002548:	6821      	ldr	r1, [r4, #0]
 800254a:	3503      	adds	r5, #3
 800254c:	1a6d      	subs	r5, r5, r1
 800254e:	f025 0503 	bic.w	r5, r5, #3
 8002552:	3508      	adds	r5, #8
 8002554:	2d0c      	cmp	r5, #12
 8002556:	bf38      	it	cc
 8002558:	250c      	movcc	r5, #12
 800255a:	4629      	mov	r1, r5
 800255c:	4638      	mov	r0, r7
 800255e:	f7ff ffa5 	bl	80024ac <sbrk_aligned>
 8002562:	3001      	adds	r0, #1
 8002564:	d02b      	beq.n	80025be <_malloc_r+0xd2>
 8002566:	6823      	ldr	r3, [r4, #0]
 8002568:	442b      	add	r3, r5
 800256a:	6023      	str	r3, [r4, #0]
 800256c:	e00e      	b.n	800258c <_malloc_r+0xa0>
 800256e:	6822      	ldr	r2, [r4, #0]
 8002570:	1b52      	subs	r2, r2, r5
 8002572:	d41e      	bmi.n	80025b2 <_malloc_r+0xc6>
 8002574:	2a0b      	cmp	r2, #11
 8002576:	d916      	bls.n	80025a6 <_malloc_r+0xba>
 8002578:	1961      	adds	r1, r4, r5
 800257a:	42a3      	cmp	r3, r4
 800257c:	6025      	str	r5, [r4, #0]
 800257e:	bf18      	it	ne
 8002580:	6059      	strne	r1, [r3, #4]
 8002582:	6863      	ldr	r3, [r4, #4]
 8002584:	bf08      	it	eq
 8002586:	6031      	streq	r1, [r6, #0]
 8002588:	5162      	str	r2, [r4, r5]
 800258a:	604b      	str	r3, [r1, #4]
 800258c:	4638      	mov	r0, r7
 800258e:	f104 060b 	add.w	r6, r4, #11
 8002592:	f000 f8cf 	bl	8002734 <__malloc_unlock>
 8002596:	f026 0607 	bic.w	r6, r6, #7
 800259a:	1d23      	adds	r3, r4, #4
 800259c:	1af2      	subs	r2, r6, r3
 800259e:	d0b6      	beq.n	800250e <_malloc_r+0x22>
 80025a0:	1b9b      	subs	r3, r3, r6
 80025a2:	50a3      	str	r3, [r4, r2]
 80025a4:	e7b3      	b.n	800250e <_malloc_r+0x22>
 80025a6:	6862      	ldr	r2, [r4, #4]
 80025a8:	42a3      	cmp	r3, r4
 80025aa:	bf0c      	ite	eq
 80025ac:	6032      	streq	r2, [r6, #0]
 80025ae:	605a      	strne	r2, [r3, #4]
 80025b0:	e7ec      	b.n	800258c <_malloc_r+0xa0>
 80025b2:	4623      	mov	r3, r4
 80025b4:	6864      	ldr	r4, [r4, #4]
 80025b6:	e7b2      	b.n	800251e <_malloc_r+0x32>
 80025b8:	4634      	mov	r4, r6
 80025ba:	6876      	ldr	r6, [r6, #4]
 80025bc:	e7b9      	b.n	8002532 <_malloc_r+0x46>
 80025be:	230c      	movs	r3, #12
 80025c0:	603b      	str	r3, [r7, #0]
 80025c2:	4638      	mov	r0, r7
 80025c4:	f000 f8b6 	bl	8002734 <__malloc_unlock>
 80025c8:	e7a1      	b.n	800250e <_malloc_r+0x22>
 80025ca:	6025      	str	r5, [r4, #0]
 80025cc:	e7de      	b.n	800258c <_malloc_r+0xa0>
 80025ce:	bf00      	nop
 80025d0:	200000c0 	.word	0x200000c0

080025d4 <_sbrk_r>:
 80025d4:	b538      	push	{r3, r4, r5, lr}
 80025d6:	4d06      	ldr	r5, [pc, #24]	; (80025f0 <_sbrk_r+0x1c>)
 80025d8:	2300      	movs	r3, #0
 80025da:	4604      	mov	r4, r0
 80025dc:	4608      	mov	r0, r1
 80025de:	602b      	str	r3, [r5, #0]
 80025e0:	f7fd fff6 	bl	80005d0 <_sbrk>
 80025e4:	1c43      	adds	r3, r0, #1
 80025e6:	d102      	bne.n	80025ee <_sbrk_r+0x1a>
 80025e8:	682b      	ldr	r3, [r5, #0]
 80025ea:	b103      	cbz	r3, 80025ee <_sbrk_r+0x1a>
 80025ec:	6023      	str	r3, [r4, #0]
 80025ee:	bd38      	pop	{r3, r4, r5, pc}
 80025f0:	200000c8 	.word	0x200000c8

080025f4 <__sread>:
 80025f4:	b510      	push	{r4, lr}
 80025f6:	460c      	mov	r4, r1
 80025f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025fc:	f000 f8a0 	bl	8002740 <_read_r>
 8002600:	2800      	cmp	r0, #0
 8002602:	bfab      	itete	ge
 8002604:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002606:	89a3      	ldrhlt	r3, [r4, #12]
 8002608:	181b      	addge	r3, r3, r0
 800260a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800260e:	bfac      	ite	ge
 8002610:	6563      	strge	r3, [r4, #84]	; 0x54
 8002612:	81a3      	strhlt	r3, [r4, #12]
 8002614:	bd10      	pop	{r4, pc}

08002616 <__swrite>:
 8002616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800261a:	461f      	mov	r7, r3
 800261c:	898b      	ldrh	r3, [r1, #12]
 800261e:	05db      	lsls	r3, r3, #23
 8002620:	4605      	mov	r5, r0
 8002622:	460c      	mov	r4, r1
 8002624:	4616      	mov	r6, r2
 8002626:	d505      	bpl.n	8002634 <__swrite+0x1e>
 8002628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800262c:	2302      	movs	r3, #2
 800262e:	2200      	movs	r2, #0
 8002630:	f000 f868 	bl	8002704 <_lseek_r>
 8002634:	89a3      	ldrh	r3, [r4, #12]
 8002636:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800263a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800263e:	81a3      	strh	r3, [r4, #12]
 8002640:	4632      	mov	r2, r6
 8002642:	463b      	mov	r3, r7
 8002644:	4628      	mov	r0, r5
 8002646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800264a:	f000 b817 	b.w	800267c <_write_r>

0800264e <__sseek>:
 800264e:	b510      	push	{r4, lr}
 8002650:	460c      	mov	r4, r1
 8002652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002656:	f000 f855 	bl	8002704 <_lseek_r>
 800265a:	1c43      	adds	r3, r0, #1
 800265c:	89a3      	ldrh	r3, [r4, #12]
 800265e:	bf15      	itete	ne
 8002660:	6560      	strne	r0, [r4, #84]	; 0x54
 8002662:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002666:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800266a:	81a3      	strheq	r3, [r4, #12]
 800266c:	bf18      	it	ne
 800266e:	81a3      	strhne	r3, [r4, #12]
 8002670:	bd10      	pop	{r4, pc}

08002672 <__sclose>:
 8002672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002676:	f000 b813 	b.w	80026a0 <_close_r>
	...

0800267c <_write_r>:
 800267c:	b538      	push	{r3, r4, r5, lr}
 800267e:	4d07      	ldr	r5, [pc, #28]	; (800269c <_write_r+0x20>)
 8002680:	4604      	mov	r4, r0
 8002682:	4608      	mov	r0, r1
 8002684:	4611      	mov	r1, r2
 8002686:	2200      	movs	r2, #0
 8002688:	602a      	str	r2, [r5, #0]
 800268a:	461a      	mov	r2, r3
 800268c:	f7fd fdc3 	bl	8000216 <_write>
 8002690:	1c43      	adds	r3, r0, #1
 8002692:	d102      	bne.n	800269a <_write_r+0x1e>
 8002694:	682b      	ldr	r3, [r5, #0]
 8002696:	b103      	cbz	r3, 800269a <_write_r+0x1e>
 8002698:	6023      	str	r3, [r4, #0]
 800269a:	bd38      	pop	{r3, r4, r5, pc}
 800269c:	200000c8 	.word	0x200000c8

080026a0 <_close_r>:
 80026a0:	b538      	push	{r3, r4, r5, lr}
 80026a2:	4d06      	ldr	r5, [pc, #24]	; (80026bc <_close_r+0x1c>)
 80026a4:	2300      	movs	r3, #0
 80026a6:	4604      	mov	r4, r0
 80026a8:	4608      	mov	r0, r1
 80026aa:	602b      	str	r3, [r5, #0]
 80026ac:	f7fd ff5b 	bl	8000566 <_close>
 80026b0:	1c43      	adds	r3, r0, #1
 80026b2:	d102      	bne.n	80026ba <_close_r+0x1a>
 80026b4:	682b      	ldr	r3, [r5, #0]
 80026b6:	b103      	cbz	r3, 80026ba <_close_r+0x1a>
 80026b8:	6023      	str	r3, [r4, #0]
 80026ba:	bd38      	pop	{r3, r4, r5, pc}
 80026bc:	200000c8 	.word	0x200000c8

080026c0 <_fstat_r>:
 80026c0:	b538      	push	{r3, r4, r5, lr}
 80026c2:	4d07      	ldr	r5, [pc, #28]	; (80026e0 <_fstat_r+0x20>)
 80026c4:	2300      	movs	r3, #0
 80026c6:	4604      	mov	r4, r0
 80026c8:	4608      	mov	r0, r1
 80026ca:	4611      	mov	r1, r2
 80026cc:	602b      	str	r3, [r5, #0]
 80026ce:	f7fd ff56 	bl	800057e <_fstat>
 80026d2:	1c43      	adds	r3, r0, #1
 80026d4:	d102      	bne.n	80026dc <_fstat_r+0x1c>
 80026d6:	682b      	ldr	r3, [r5, #0]
 80026d8:	b103      	cbz	r3, 80026dc <_fstat_r+0x1c>
 80026da:	6023      	str	r3, [r4, #0]
 80026dc:	bd38      	pop	{r3, r4, r5, pc}
 80026de:	bf00      	nop
 80026e0:	200000c8 	.word	0x200000c8

080026e4 <_isatty_r>:
 80026e4:	b538      	push	{r3, r4, r5, lr}
 80026e6:	4d06      	ldr	r5, [pc, #24]	; (8002700 <_isatty_r+0x1c>)
 80026e8:	2300      	movs	r3, #0
 80026ea:	4604      	mov	r4, r0
 80026ec:	4608      	mov	r0, r1
 80026ee:	602b      	str	r3, [r5, #0]
 80026f0:	f7fd ff55 	bl	800059e <_isatty>
 80026f4:	1c43      	adds	r3, r0, #1
 80026f6:	d102      	bne.n	80026fe <_isatty_r+0x1a>
 80026f8:	682b      	ldr	r3, [r5, #0]
 80026fa:	b103      	cbz	r3, 80026fe <_isatty_r+0x1a>
 80026fc:	6023      	str	r3, [r4, #0]
 80026fe:	bd38      	pop	{r3, r4, r5, pc}
 8002700:	200000c8 	.word	0x200000c8

08002704 <_lseek_r>:
 8002704:	b538      	push	{r3, r4, r5, lr}
 8002706:	4d07      	ldr	r5, [pc, #28]	; (8002724 <_lseek_r+0x20>)
 8002708:	4604      	mov	r4, r0
 800270a:	4608      	mov	r0, r1
 800270c:	4611      	mov	r1, r2
 800270e:	2200      	movs	r2, #0
 8002710:	602a      	str	r2, [r5, #0]
 8002712:	461a      	mov	r2, r3
 8002714:	f7fd ff4e 	bl	80005b4 <_lseek>
 8002718:	1c43      	adds	r3, r0, #1
 800271a:	d102      	bne.n	8002722 <_lseek_r+0x1e>
 800271c:	682b      	ldr	r3, [r5, #0]
 800271e:	b103      	cbz	r3, 8002722 <_lseek_r+0x1e>
 8002720:	6023      	str	r3, [r4, #0]
 8002722:	bd38      	pop	{r3, r4, r5, pc}
 8002724:	200000c8 	.word	0x200000c8

08002728 <__malloc_lock>:
 8002728:	4801      	ldr	r0, [pc, #4]	; (8002730 <__malloc_lock+0x8>)
 800272a:	f7ff be0b 	b.w	8002344 <__retarget_lock_acquire_recursive>
 800272e:	bf00      	nop
 8002730:	200000bc 	.word	0x200000bc

08002734 <__malloc_unlock>:
 8002734:	4801      	ldr	r0, [pc, #4]	; (800273c <__malloc_unlock+0x8>)
 8002736:	f7ff be06 	b.w	8002346 <__retarget_lock_release_recursive>
 800273a:	bf00      	nop
 800273c:	200000bc 	.word	0x200000bc

08002740 <_read_r>:
 8002740:	b538      	push	{r3, r4, r5, lr}
 8002742:	4d07      	ldr	r5, [pc, #28]	; (8002760 <_read_r+0x20>)
 8002744:	4604      	mov	r4, r0
 8002746:	4608      	mov	r0, r1
 8002748:	4611      	mov	r1, r2
 800274a:	2200      	movs	r2, #0
 800274c:	602a      	str	r2, [r5, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	f7fd feec 	bl	800052c <_read>
 8002754:	1c43      	adds	r3, r0, #1
 8002756:	d102      	bne.n	800275e <_read_r+0x1e>
 8002758:	682b      	ldr	r3, [r5, #0]
 800275a:	b103      	cbz	r3, 800275e <_read_r+0x1e>
 800275c:	6023      	str	r3, [r4, #0]
 800275e:	bd38      	pop	{r3, r4, r5, pc}
 8002760:	200000c8 	.word	0x200000c8

08002764 <_init>:
 8002764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002766:	bf00      	nop
 8002768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800276a:	bc08      	pop	{r3}
 800276c:	469e      	mov	lr, r3
 800276e:	4770      	bx	lr

08002770 <_fini>:
 8002770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002772:	bf00      	nop
 8002774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002776:	bc08      	pop	{r3}
 8002778:	469e      	mov	lr, r3
 800277a:	4770      	bx	lr
